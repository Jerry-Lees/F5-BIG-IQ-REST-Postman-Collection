{
	"info": {
		"_postman_id": "f83caa9b-10d9-4a1d-8237-beeeb69960f2",
		"name": "BIG-IQ REST Tools",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Completed",
			"item": [
				{
					"name": "SSL Certificate Management",
					"item": [
						{
							"name": "Upload File",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    NewFileUploadContent - The contents of the certificate or key to upload. This should be copied from teh file into the variable, if it fails chances are /r/n's are in the file. You can also upload teh file manually to /var/config/rest/downloads/\r",
											"Output:\r",
											"    NewFileUploadSize           - The total size of the content being uploaded.\r",
											"    NewFileUploadRequestSize    - The total size of teh request that will be sent. 131 is a magic number, it is the size of the request body if everything user added were blank.\r",
											"    NewFileUploadContent-Range  - This is the size of the chunk being sent, and byte ranges in the entire file, if larger than 1Mb. Note--- for this release, uploads larger than 1Mb are *NOT* supported. The REST Interface requires this header regardless, which makes uploads of smaller files unessisarily complex, IMHO.\r",
											"*/\r",
											"\r",
											"Content= pm.variables.get(\"NewFileUploadContent\")\r",
											"ContentSize = Content.length\r",
											"console.log(\"Content size is: \"+ ContentSize)\r",
											"console.log(\"The file's contents are below:\")\r",
											"console.log(Content)\r",
											"// NOTE: Request Body's greater than 1,048,575 bytes are not supported by this Postman request. requests greater than 1MB (1,048,576 bytes) must be chunked in seperate requests.\r",
											"\r",
											"// *MAGIC NUMBER ALERT* 131 is the size in bytes (plus 5 'mystery bytes') of the provided example REST payload with a blank file content. 127 is that same number plus 1 byte. Changing the body in this request requires changing both values accordingly.\r",
											"postman.setEnvironmentVariable(\"NewFileUploadSize\", ContentSize);\r",
											"postman.setEnvironmentVariable(\"NewFileUploadRequestSize\",ContentSize+131);\r",
											"UploadRequestSize = pm.variables.get(\"NewFileUploadRequestSize\")\r",
											"postman.setEnvironmentVariable(\"NewFileUploadContent-Range\",\"0-\"+UploadRequestSize+\"/\"+UploadRequestSize);\r",
											"\r",
											"console.log(\"ContentRange Header set to: \"+pm.variables.get(\"NewFileUploadContent-Range\"));\r",
											"pm.request.headers.remove('Content-Type')\r",
											"pm.request.headers.add({\r",
											"    key: \"Content-Type\",\r",
											"    value:\"application/octet-stream\"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									},
									{
										"key": "Content-Range",
										"value": "{{NewFileUploadContent-Range}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"payload\": {\r\n        \"content\": \"{{NewFileUploadContent}}\"\r\n    },\r\n    \"headers\": {\r\n          \"Content-Type\": \"application/octet-stream\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/shared/file-transfer/uploads/{{NewFileUploadName}}",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"shared",
										"file-transfer",
										"uploads",
										"{{NewFileUploadName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Key from Uploaded File",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    NewFileUploadName       - The name of the file that was uploaded to /var/config/rest/downloads/ from the \"Upload File\" request or directly via scp or some other means.\r",
											"    NewFileUploadContent    - The content being uploaded so calculations for size and Content-Range can be calculated. \r",
											"Output:\r",
											"    NewFileUploadID             - The ID of the file upload, can be used later to check on the status of teh key creation. Ideally, it is \"FINISHED\"-- but if not it can provide some troubleshooting information.\r",
											"*/\r",
											"\r",
											"Content= pm.variables.get(\"NewFileUploadContent\")\r",
											"ContentSize = Content.length\r",
											"console.log(\"Content size is: \"+ ContentSize)\r",
											"// NOTE: Request Body's greater than 1,048,575 bytes are not supported by this Postman request. requests greater than 1MB (1,048,576 bytes) must be chunked in seperate requests.\r",
											"\r",
											"// *MAGIC NUMBER ALERT* 131 is the size in bytes (plus 5 'mystery bytes') of the provided example REST payload with a blank file content. 127 is that same number plus 1 byte. Changing the body in this request requires changing both values accordingly.\r",
											"\r",
											"\r",
											"pm.variables.set(\"NewFileUploadContent-Range\",\"0-\"+(ContentSize+131)+\"/\"+(ContentSize+132));\r",
											"console.log(\"ContentRange Header set to: \"+pm.variables.get(\"NewFileUploadContent-Range\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    NewFileUploadName       - The name of the file that was uploaded to /var/config/rest/downloads/ from the \"Upload File\" request or directly via scp or some other means.\r",
											"    NewFileUploadContent    - The content being uploaded so calculations for size and Content-Range can be calculated. \r",
											"Output:\r",
											"    NewFileUploadID             - The ID of the file upload, can be used later to check on the status of teh key creation. Ideally, it is \"FINISHED\"-- but if not it can provide some troubleshooting information.\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"RequestID = jsonData.id\r",
											"RequestStatus = jsonData.status\r",
											"postman.setEnvironmentVariable(\"NewFileUploadID\",RequestID)\r",
											"StatusURL = \"https://\"+MgmtIP+\"/mgmt/cm/adc-core/tasks/certificate-management/\"+RequestID;\r",
											"RequestCount = 0;\r",
											"console.log(\"Requesting Status from '\"+StatusURL+\"'\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filePath\": \"/var/config/rest/downloads/{{NewFileUploadName}}\",\r\n    \"itemName\": \"{{NewFileUploadName}}\",\r\n    \"itemPartition\": \"Common\",\r\n    \"command\": \"ADD_KEY\"\r\n}"
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/tasks/certificate-management",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"tasks",
										"certificate-management"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Cert from Uploaded File",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"Content= pm.variables.get(\"NewFileUploadContent\")\r",
											"ContentSize = Content.length\r",
											"console.log(\"Content size is: \"+ ContentSize)\r",
											"// NOTE: Request Body's greater than 1,048,575 bytes are not supported by this Postman request. requests greater than 1MB (1,048,576 bytes) must be chunked in seperate requests.\r",
											"\r",
											"// *MAGIC NUMBER ALERT* 131 is the size in bytes (plus 5 'mystery bytes') of the provided example REST payload with a blank file content. 127 is that same number plus 1 byte. Changing the body in this request requires changing both values accordingly.\r",
											"\r",
											"\r",
											"pm.variables.set(\"NewFileUploadContent-Range\",\"0-\"+(ContentSize+131)+\"/\"+(ContentSize+132));\r",
											"console.log(\"ContentRange Header set to: \"+pm.variables.get(\"NewFileUploadContent-Range\"));\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    NewFileUploadName       - The name of the file that was uploaded to /var/config/rest/downloads/ from the \"Upload File\" request or directly via scp or some other means.\r",
											"    NewFileUploadContent    - The content being uploaded so calculations for size and Content-Range can be calculated. \r",
											"Output:\r",
											"    NewFileUploadID             - The ID of the file upload, can be used later to check on the status of teh key creation. Ideally, it is \"FINISHED\"-- but if not it can provide some troubleshooting information.\r",
											"*/\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"RequestID = jsonData.id\r",
											"RequestStatus = jsonData.status\r",
											"postman.setEnvironmentVariable(\"NewFileUploadID\",RequestID)\r",
											"\r",
											"StatusURL = \"https://\"+MgmtIP+\"/mgmt/cm/adc-core/tasks/certificate-management/\"+RequestID;\r",
											"RequestCount = 0;\r",
											"console.log(\"Requesting Status from '\"+StatusURL+\"'\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"filePath\": \"/var/config/rest/downloads/{{NewFileUploadName}}\",\r\n    \"itemName\": \"{{NewFileUploadName}}\",\r\n    \"itemPartition\": \"Common\",\r\n    \"command\": \"ADD_CERT\"\r\n}"
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/tasks/certificate-management",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"tasks",
										"certificate-management"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get SSL Object Creation Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    NewFileUploadID - The ID of a previous SSL Object Creation request.\r",
											"Output:\r",
											"    None, REST is returned with status and, potentially, error information.\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/tasks/certificate-management/{{NewFileUploadID}}",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"tasks",
										"certificate-management",
										"{{NewFileUploadID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Device Info",
					"item": [
						{
							"name": "Get Devices",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    none\r",
											"Output:\r",
											"    None, REST is returned with information about all imported devices.\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/shared/resolver/device-groups/cm-adccore-allbigipDevices/devices/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"shared",
										"resolver",
										"device-groups",
										"cm-adccore-allbigipDevices",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Device by address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Input:\r",
											"    SearchDeviceAddress - The address of the LTM to place the configuration on.\r",
											"Output:\r",
											"    DeviceID            - The ID of the LTM Device to recieve configuration\r",
											"    DeviceSelfLink      - The link to the LTM device to use in JSON documents used in a REST Call.\r",
											"    DeviceSelfURI       - The URI to use in a REST call to gather configuration representing the LTM device.\r",
											"    NewDeviceLink       - Same as DeviceSelfLink \r",
											"*/\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let devices = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"devices = jsonData.items;\r",
											"//console.log (devices)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"SearchDeviceAddress\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (device in devices){\r",
											"    if (jsonData.items[device].address == searchname) {\r",
											"        deviceid=jsonData.items[device].uuid\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"DeviceID\", deviceid);\r",
											"        postman.setEnvironmentVariable(\"DeviceSelfLink\", jsonData.items[device].selfLink);\r",
											"        postman.setEnvironmentVariable(\"DeviceSelfURI\", jsonData.items[device].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"NewDeviceLink\", jsonData.items[device].selfLink);\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found device with address \"+searchname+\": Now you may continue to get the specific device's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"found, but not updated, the following environmental information:\")\r",
											"            console.log(\"The device hostname is: \"+jsonData.items[device].hostname)\r",
											"            console.log(\"The device ID is: \"+jsonData.items[device].uuid)\r",
											"            console.log(\"The device self sink is: \"+jsonData.items[device].selfLink.replace(/localhost/g,bigiqmgmt))\r",
											"        }\r",
											"        console.log (\"Gathering the specific device's json from the REST API.\")\r",
											"    }\r",
											"    console.log (\"**NOTICE** The device hostname that will be used for changes will be: \"+jsonData.items[device].hostname+\". Verify this is correct before proceeding!!\")\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/shared/resolver/device-groups/cm-adccore-allbigipDevices/devices/?$filter=('address eq '{{SearchDeviceAddress}}')",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"shared",
										"resolver",
										"device-groups",
										"cm-adccore-allbigipDevices",
										"devices",
										""
									],
									"query": [
										{
											"key": "$filter",
											"value": "('address eq '{{SearchDeviceAddress}}')"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Node Functions",
					"item": [
						{
							"name": "Get Node ID From IP Address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    SearchNodeName - The name of the node to find in all nodes.\r",
											"Outputs:\r",
											"    NodeID          - The ID of the found node.\r",
											"    NodeSelfLink    - The link to the node's configuration to use in JSON Documents used to make a REST call\r",
											"    NodeSelfURI     - The link to a node's configuration to use when making a REST call.\r",
											"    NodeDescription - The node's description.\r",
											"    NodeName        - The name of the Node, automatically the same as the IP address.\r",
											"    NodeJSON        - The JSON output representing the Node3's configuration.\r",
											"*/\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let nodes = pm.globals.get(\"itemOfArray\");\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"nodes = jsonData.items;\r",
											"\r",
											"searchname = pm.variables.get(\"SearchNodeName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (node in nodes){\r",
											"    if (jsonData.items[node].name == searchname) {\r",
											"        nodeid=jsonData.items[node].id\r",
											"        postman.setEnvironmentVariable(\"NodeID\", nodeid);\r",
											"        postman.setEnvironmentVariable(\"NodeSelfLink\", jsonData.items[node].selfLink);\r",
											"        postman.setEnvironmentVariable(\"NodeSelfURI\", jsonData.items[node].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"NodeDescription\", jsonData.items[node].description);\r",
											"        postman.setEnvironmentVariable(\"NodeName\", jsonData.items[node].name);\r",
											"        console.log (\"Now you may continue to get the specific node's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test(\"Items Returned > 0 Test\", function () {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    const responseJson = pm.response.json();\r",
											"    // this is technically not 100% accurate, we want it to actually be exactly 1 in most cases.\r",
											"    pm.expect(responseJson.totalItems).to.be.greaterThan(0);\r",
											"    \r",
											"});\r",
											"//now get the node's JSON inline\r",
											"const options = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"NodeSelfLink\").replace(/localhost/g,MgmtIP),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"        console.log(\"Found JSON for Node, storing in Environment variable 'NodeJSON'\")\r",
											"        postman.setEnvironmentVariable(\"NodeJSON\", response.text())\r",
											"        console.log(pm.variables.get(\"NodeSelfLink\"))\r",
											"        console.log(pm.variables.get(\"NodeJSON\"))\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/node?$filter=name eq '{{SearchNodeName}}'",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"node"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '{{SearchNodeName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Node From Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    SearchNodeName  - User Input, The name (IP, if names were not provided at node creation) of the node.\r",
											"    NodeDescription - User Input, The description of teh new node to be created.\r",
											"    DeviceSelfLink  - Programatic input, From \"Get Device by Address\".\r",
											"\r",
											"Outputs:\r",
											"    NodeID          - The ID of the created Node.\r",
											"    NodeName        - The Name of teh created node.\r",
											"    NodeSelfLink    - The Link reference for future REST calls. (This has localhost as the hostname, it is for teh Request body of future rest calls. If you need to call teh object itself use NodeSelfURI instead)\r",
											"    NodeSelfURI     - The URI with IP address of the BIG-IQ to use to make future REST calls. (Do not use in a request body)\r",
											"    NodeDescription - The Description of the node.\r",
											"    NodeName        - The Name of the node.\r",
											"    NodeJSON        - The JSON describing the node.\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"searchname = pm.variables.get(\"SearchNodeName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"    nodeid=jsonData.id\r",
											"    postman.setEnvironmentVariable(\"NodeID\", nodeid);\r",
											"    postman.setEnvironmentVariable(\"NodeSelfLink\", jsonData.selfLink);\r",
											"    postman.setEnvironmentVariable(\"NodeSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"    postman.setEnvironmentVariable(\"NodeDescription\", jsonData.description);\r",
											"    postman.setEnvironmentVariable(\"NodeName\", jsonData.name);\r",
											"    postman.setEnvironmentVariable(\"NodeJSON\", responseBody)\r",
											"    console.log(\"Found JSON for Node, storing in Environment variable 'NodeJSON'\")\r",
											"    //log data saved\r",
											"    console.log (\"Created \"+searchname+\": Now you may continue to get the specific node's json from the REST API.\")\r",
											"    //log if verbose set to greater than 0, do not log if set to 0\r",
											"    if (pm.variables.get(\"BeVerbose\")) {\r",
											"        //console.log(\"\")\r",
											"        console.log(\"Updated the following environmental information:\")\r",
											"        console.log(\"Set node ID to: \"+pm.variables.get(\"NodeID\"))\r",
											"        console.log(\"Set node Self Link to: \"+pm.variables.get(\"NodeSelfLink\"))\r",
											"        console.log(\"Set node Self Link to: \"+pm.variables.get(\"NodeSelfURI\"))\r",
											"    }\r",
											"    console.log (\"Gathering the specific node's json from the REST API.\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"kind\": \"cm:adc-core:working-config:ltm:node:adcnodestate\",\r\n\t\"name\": \"{{SearchNodeName}}\",\r\n\t\"ratio\": 1,\r\n\t\"address\": \"{{SearchNodeName}}\",\r\n\t\"partition\": \"Common\",\r\n\t\"rateLimit\": \"disabled\",\r\n\t\"generation\": 1,\r\n\t\"description\": \"{{NodeDescription}}\",\r\n\t\"isEphemeral\": false,\r\n\t\"stateConfig\": \"user-up\",\r\n\t\"sessionConfig\": \"user-enabled\",\r\n\t\"connectionLimit\": 0,\r\n\t\"deviceReference\": {\r\n\t\t\"link\": \"{{DeviceSelfLink}}\"\r\n\t}\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/node/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"node",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Node From Environment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    NodeID        - Programatic input (from another REST call)\r",
											"\r",
											"Outputs:\r",
											"    NodeID          - Set to Blank\r",
											"    NodeName        - Set to Blank\r",
											"    NodeSelfLink    - Set to Blank\r",
											"    NodeSelfURI     - Set to Blank\r",
											"    NodeJSON        - Set to Blank\r",
											"    NodeDescription - Set to Blank\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"searchname = pm.variables.get(\"SearchNodeName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"    nodeid=jsonData.id\r",
											"    //gather data for environment Variables related to the object\r",
											"    postman.setEnvironmentVariable(\"NodeID\", \"\");\r",
											"    postman.setEnvironmentVariable(\"NodeName\", \"\")\r",
											"    postman.setEnvironmentVariable(\"NodeSelfLink\", \"\")\r",
											"    postman.setEnvironmentVariable(\"NodeSelfURI\", \"\")\r",
											"    postman.setEnvironmentVariable(\"NodeJSON\", \"\")\r",
											"    postman.setEnvironmentVariable(\"NodeDescription\", \"\")\r",
											"    //log data saved\r",
											"    console.log (\"Deleted \"+searchname+\".\")\r",
											"    //log if verbose set to greater than 0, do not log if set to 0\r",
											"    if (pm.variables.get(\"BeVerbose\")) {\r",
											"        //console.log(\"\")\r",
											"        console.log(\"updated the following environmental information:\")\r",
											"        console.log(\"Set node ID to: \"+pm.variables.get(\"NodeID\"))\r",
											"        console.log(\"Set node Self Link to: \"+pm.variables.get(\"NodeSelfLink\"))\r",
											"        console.log(\"Set node Self URI to: \"+pm.variables.get(\"NodeSelfURI\"))\r",
											"        console.log(\"Set node NodeJSON Link to: \"+pm.variables.get(\"NodeJSON\"))\r",
											"        console.log(\"Set node NodeDescription to: \"+pm.variables.get(\"NodeDescription\"))\r",
											"    }\r",
											"    console.log (\"Gathering the specific node's json from the REST API.\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/node/{{NodeID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"node",
										"{{NodeID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Monitor Functions",
					"item": [
						{
							"name": "Create New Monitor from Environment Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    MonitorTypeName     - User Supplied value for the type of monitor being created.\r",
											"    MonitorName         - The name of the new monitor.\r",
											"    MonitorRecvString   - The Receive string for the monitor. (ensure that \\r\\n is entered as \\\\r\\\\n to escape the \\, otherwise it won't work)\r",
											"    MonitorSendString   - The Send strin for the monitor. (ensure that \\r\\n is entered as \\\\r\\\\n to escape the \\, otherwise it won't work)\r",
											"\r",
											"Outputs:\r",
											"    MonitorID           - The ID of the monitor created\r",
											"    MonitorSelfLink     - The link to the monitor for adding to JSON documents\r",
											"    MonitorSelfURI      - The link to the monitor used in REST calls\r",
											"\tMonitorTypeString\t- Programmatically populated value, The string of the path used to reference the type in a JSON document.\r",
											"\tMonitorTypeName\t\t- Programmatically populated value, The string used to reference the type in a JSON document.\r",
											"*/\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"postman.setEnvironmentVariable(\"MonitorID\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"var monitortype = jsonData.kind\r",
											"\r",
											"postman.setEnvironmentVariable(\"MonitorType\", monitortype);\r",
											"postman.setEnvironmentVariable(\"MonitorJSON\", responseBody);\r",
											"postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"\r",
											"//log data saved\r",
											"console.log (\"Now you may continue to add this monitor where needed.\")\r",
											"//log if verbose set to greater than 0, do not log if set to 0\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    //console.log(\"\")\r",
											"    console.log(\"updated the following environmental information:\")\r",
											"    console.log(\"Set Monitor ID to: \"+pm.variables.get(\"MonitorID\"))\r",
											"    console.log(\"Set Monitor Self Link to: \"+pm.variables.get(\"MonitorSelfLink\"));\r",
											"    console.log(\"Set Monitor Type String to: \"+pm.variables.get(\"MonitorTypeString\"));\r",
											"    //MonitorType\r",
											"    console.log(\"Set Monitor Type Name to: \"+pm.variables.get(\"MonitorTypeName\"));\r",
											"}\r",
											"console.log (\"Gathering the specific Monitor's json from the REST API.\")\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"RecvString = JSON.stringify(pm.variables.get(\"MonitorRecvString\"));\r",
											"SendString = JSON.stringify(pm.variables.get(\"MonitorSendString\"));\r",
											"//postman.setEnvironmentVariable(\"MonitorRecvString\", RecvString.replace(/\\r\\n/g, \"\\\\r\\\\n\"));\r",
											"//postman.setEnvironmentVariable(\"MonitorSendString\", SendString.replace(/\\r\\n/g, \"\\\\r\\\\n\"));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"kind\": \"cm:adc-core:working-config:ltm:monitor:{{MonitorTypeName}}:adcmonitor{{MonitorTypeName}}state\",\r\n    \"name\": \"{{MonitorName}}\",\r\n    \"recv\": \"{{MonitorRecvString}}\",\r\n    \"send\": \"{{MonitorSendString}}\",\r\n    \"timeout\": 16,\r\n    \"interval\": 5,\r\n    \"partition\": \"Common\",\r\n    \"defaultsFromReference\": {\r\n        \"name\": \"{{MonitorTypeName}}\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/monitor/{{MonitorTypeName}}/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"monitor",
										"{{MonitorTypeName}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Monitor from Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    MonitorTypeName  - User Supplied value for the type of monitor being created, is programatically updated from monitor get calls in this collection as well.\r",
											"    MonitorID           - The ID of the monitor deleted.\r",
											"Outputs:\r",
											"    MonitorID           - The ID of the monitor created, set to \"\".\r",
											"    MonitorSelfLink     - The link to the monitor for adding to JSON documents, set to \"\".\r",
											"    MonitorType         - The \"kind\" of monitor, set to \"\".\r",
											"    MonitorSelfURI      - The link to the monitor used in REST calls, set to \"\".\r",
											"\tMonitorTypeString\t- Programmatically populated value, The string of the path used to reference the type in a JSON document, set to \"\".\r",
											"\tMonitorTypeName\t\t- Programmatically populated value, The string used to reference the type in a JSON document, set to \"\".\r",
											"*/\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"postman.setEnvironmentVariable(\"MonitorID\", \"\");\r",
											"postman.setEnvironmentVariable(\"MonitorSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"MonitorSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"MonitorType\", \"\");\r",
											"postman.setEnvironmentVariable(\"MonitorTypeString\", \"\")\r",
											"postman.setEnvironmentVariable(\"MonitorTypeName\", \"\")\r",
											"\r",
											"postman.setEnvironmentVariable(\"MonitorJSON\", responseBody);\r",
											"\r",
											"//log data saved\r",
											"console.log (\"Now you may continue to add this monitor where needed.\")\r",
											"//log if verbose set to greater than 0, do not log if set to 0\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    //console.log(\"\")\r",
											"    console.log(\"updated the following environmental information:\")\r",
											"    console.log(\"Set Monitor ID to: \"+pm.variables.get(\"MonitorID\"))\r",
											"    console.log(\"Set Monitor Self Link to: \"+pm.variables.get(\"MonitorSelfLink\"));\r",
											"    console.log(\"Set Monitor Type String to: \"+pm.variables.get(\"MonitorTypeString\"));\r",
											"    //MonitorType\r",
											"    console.log(\"Set Monitor Type Name to: \"+pm.variables.get(\"MonitorTypeName\"));\r",
											"}\r",
											"console.log (\"Gathering the specific Monitor's json from the REST API.\")\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/monitor/{{MonitorTypeName}}/{{MonitorID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"monitor",
										"{{MonitorTypeName}}",
										"{{MonitorID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Monitor from Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    MonitorTypeName     - User Supplied value for the type of monitor being created\r",
											"    SearchMonitorName   - The name of the monitor to find\r",
											"\r",
											"Outputs:\r",
											"    MonitorID           - The ID of the monitor created\r",
											"    MonitorType         - The name for the type of monitor. (This is the 'kind' from the rest response body)\r",
											"\tMonitorTypeString\t- Programmatically populated value, The string of the monitortype in a response or request body. Used in a section of it's own, unique to each monitor type. I.E. \"monitorHttpReferences\" for http monitors.\r",
											"\tMonitorTypeName\t\t- Programmatically populated value, The string used to reference the type in a JSON document. This is teh same as a TMOS Command would use, \"http\" for a http monitor etc.\r",
											"    MonitorSelfLink     - The link to the monitor for adding to JSON documents sent in the request body. (has \"localhost\" for the hostname in the URL.)\r",
											"    MonitorSelfURI      - The link to the monitor used to make REST calls. (Has teh IP address of the BIG-IQ in the URL.)\r",
											"    MonitorName         - The name of the moinitor.\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let monitors = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"monitors = jsonData.items;\r",
											"\r",
											"searchname = pm.variables.get(\"SearchMonitorName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"console.log(\"Searching for monitor named: \"+searchname)\r",
											"for (monitor in monitors){\r",
											"    if (jsonData.items[monitor].name == searchname) {\r",
											"        console.log(\"Found Monitor named \"+searchname+\"!\")\r",
											"        monitorid=jsonData.items[monitor].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"MonitorID\", monitorid);\r",
											"        postman.setEnvironmentVariable(\"MonitorType\", jsonData.items[monitor].kind);\r",
											"\r",
											"        //set monitor variables\r",
											"        postman.setEnvironmentVariable(\"MonitorTypeString\", MonitorTypeString.Get(jsonData));\r",
											"        postman.setEnvironmentVariable(\"MonitorTypeName\", MonitorTypeName.Get(jsonData));\r",
											"        postman.setEnvironmentVariable(\"MonitorName\", jsonData.items[monitor].name)\r",
											"\r",
											"        RecvString = JSON.stringify(jsonData.items[monitor].recv).replace('\"','').replace('\"','');\r",
											"        SendString = JSON.stringify(jsonData.items[monitor].send).replace('\"','').replace('\"','');\r",
											"        console.log(RecvString.replace(\"\\r\\n\", '\\\\\\\\r\\\\\\\\n'))\r",
											"        console.log(SendString.replace('\\r\\n', '\\\\\\\\r\\\\\\\\n'))\r",
											"        console.log(JSON.stringify(jsonData.items[monitor].send).replace('\"',''));\r",
											" \r",
											"        postman.setEnvironmentVariable(\"MonitorRecvString\", RecvString);\r",
											"        postman.setEnvironmentVariable(\"MonitorSendString\", SendString);\r",
											"        \r",
											"        //Save MonitorJSON\r",
											"        postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.items[monitor].selfLink);\r",
											"        postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.items[monitor].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        \r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific monitor's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set monitor ID to: \"+pm.variables.get(\"MonitorID\"))\r",
											"            console.log(\"Set monitor Self Link to: \"+pm.variables.get(\"MonitorSelfLink\"))\r",
											"            console.log(\"Set monitor LTM Device to: \"+pm.variables.get(\"MonitorDeviceLink\"))\r",
											"            console.log(\"Set monitor Profiles Link to: \"+pm.variables.get(\"MonitorProfilesLink\"))\r",
											"        }\r",
											"        console.log (\"Gathering the specific monitor's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											"\r",
											"//now get the virtual server's JSON inline\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"const options = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"MonitorSelfURI\"),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"        console.log(\"Found JSON for Monitor (\"+searchname+\"), storing in Environment variable 'MonitorJSON'\")\r",
											"        postman.setEnvironmentVariable(\"MonitorJSON\", response.text())\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/monitor/{{MonitorTypeName}}/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"monitor",
										"{{MonitorTypeName}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pool Functions",
					"item": [
						{
							"name": "Get Pool Information from Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    SearchPoolName  - The name of the pool to find.\r",
											"    \r",
											"Outputs:\r",
											"    PoolID          - The ID of the pool.\r",
											"    PoolSelfLink    - The Link to the Pool information stored, for use inside REST request bodies. (has \"localhost\" in the URL)\r",
											"    PoolSelfURI     - The URL to the pool information stored, for use in making REST requests. (has the IP address of the BIG-IQ device in the URL.)\r",
											"    PoolMembersLink - The Link to the Pool MEMBER information stored, for use inside REST request bodies. (has \"localhost\" in the URL)\r",
											"    PoolMembersURI  - The URL to the pool MEMBER information stored, for use in making REST requests. (has the IP address of the BIG-IQ device in the URL.)\r",
											"    PoolDeviceLink  - The Link to the BIG-IP device with the configuration, for use inside REST request bodies. (has \"localhost\" in the URL)\r",
											"    PoolDeviceURI   - The URL to the BIG-IP device with the configuration, for use in making REST calls. (has the IP address of the BIG-IQ device in the URL.)\r",
											"    PoolName        - The name of the pool.\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let pools = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"pools = jsonData.items;\r",
											"\r",
											"searchname = pm.variables.get(\"SearchPoolName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (pool in pools){\r",
											"    if (jsonData.items[pool].name == searchname) {\r",
											"        poolid=jsonData.items[pool].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"PoolID\", poolid);\r",
											"        postman.setEnvironmentVariable(\"PoolSelfLink\", jsonData.items[pool].selfLink);\r",
											"        postman.setEnvironmentVariable(\"PoolSelfURI\", jsonData.items[pool].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"PoolMembersLink\", jsonData.items[pool].membersCollectionReference.link);\r",
											"        postman.setEnvironmentVariable(\"PoolMembersURI\", jsonData.items[pool].membersCollectionReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"PoolDeviceLink\", jsonData.items[pool].deviceReference.link);\r",
											"        postman.setEnvironmentVariable(\"PoolDeviceURI\", jsonData.items[pool].deviceReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"PoolName\", jsonData.items[pool].name);\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific pool's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set pool ID to: \"+pm.variables.get(\"PoolID\"))\r",
											"            console.log(\"Set Pool Self Link to: \"+pm.variables.get(\"PoolSelfLink\"))\r",
											"            console.log(\"Set pool Self URI to: \"+pm.variables.get(\"PoolSelfURI\"))\r",
											"            console.log(\"Set pool LTM Device to: \"+pm.variables.get(\"PoolDeviceLink\"))\r",
											"        }\r",
											"        console.log (\"Gathering the specific pool's json from the REST API.\")\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool/?$filter=name eq '*{{SearchPoolName}}*'",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										""
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '*{{SearchPoolName}}*'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Pool from Environment Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Pre-Reqs:\r",
											"    Previously populated monitor information is required, as is a device reference.\r",
											"\r",
											"Inputs:\r",
											"    PoolDescription     - User Input\r",
											"        This is User Supplied if creating a new Pool, Programatic Supplied if modifying a new pool.\r",
											"    NewDeviceLink       - Programatic input (from another REST call) or User Input\r",
											"        This is generally progamatically populated, it is a selfLink specifying the target Device that is managed.\r",
											"    PoolName            - User Input\r",
											"        This is User Supplied if creating a new Pool, Programatic Supplied if modifying a new pool.\r",
											"    MonitorSelfLink     - The link to the monitor. (has \"localhost\" in URL)\r",
											"    MonitorTypeString   - Programatic input (from another REST call) or User Input\r",
											"        This should be programatically populated. This is the string identifier in the JSON that specifies the type of monitor to/from REST.\r",
											"        This iss NOT the same string as is used in a TMSH command; monitorHttpReferences, monitorHttpsReferences, monitorTcpReferences, etc\r",
											"    MonitorTypeName     - Programatic input (from another REST call) or User Input\r",
											"        This can be user provided, in a search for example, or is programatically provided. It is the type of monitor. \r",
											"        Unlike above, this is teh same string used in a tmsh command; http, https, tcp, etc\r",
											"\r",
											"Outputs:\r",
											"    PoolID          - The ID for the pool.\r",
											"    PoolDeviceLink  - A Link referring to the device the configuration should be on, used in JSON documents in the request body for REST calls. (has localhost in the URL)\r",
											"    PoolMembersLink - A Link referring to the pool members collection, used in JSON documents in the request body for REST calls. (has localhost in the URL)\r",
											"    PoolSelfLink    - A Link referring to the pool itself, used in JSON documents in the request body for REST calls. (has localhost in the URL)\r",
											"    PoolSelfURI     - A URL, with the IP address of the BIG-IQ device, referring to the device the configuration should be on, used in JSON documents to make REST calls. \r",
											"    PoolJSON        - \r",
											"*/\r",
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"postman.setEnvironmentVariable(\"PoolID\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"PoolDeviceLink\", jsonData.deviceReference.link.replace(/localhost/g,bigiqmgmt))\r",
											"postman.setEnvironmentVariable(\"PoolMembersLink\", jsonData.membersCollectionReference.link)\r",
											"postman.setEnvironmentVariable(\"PoolMembersURI\", jsonData.membersCollectionReference.link.replace(/localhost/g,bigiqmgmt))\r",
											"postman.setEnvironmentVariable(\"PoolSelfLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"PoolSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"PoolJSON\", responseBody);\r",
											"\r",
											"\r",
											"//use MonitorType to determine pool monitor reference\r",
											"var monitortype = pm.variables.get(\"MonitorType\")\r",
											"\r",
											"//set monitor variables\r",
											"//postman.setEnvironmentVariable(\"MonitorTypeString\", MonitorTypeString.Get(jsonData));\r",
											"//postman.setEnvironmentVariable(\"MonitorTypeName\", MonitorTypeName.Get(jsonData));\r",
											"\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    console.log(\"Created Pool with the following properties:\")\r",
											"    console.log(\"Name: \"+jsonData.name)\r",
											"    console.log(\"Pool ID: \"+pm.variables.get(\"PoolID\"))\r",
											"    console.log(\"Pool Device Link \"+pm.variables.get(\"PoolDeviceLink\"))\r",
											"    console.log(\"Pool Members Link \"+pm.variables.get(\"PoolMembersLink\"))\r",
											"    console.log(\"Pool Self Link \"+pm.variables.get(\"PoolSelfLink\"))\r",
											"    console.log(\"*** Do not forget to add nodes as pool members! ***\")\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"console.log(bigiqmgmt)\r",
											"console.log(pm.variables.get(\"MonitorSelfLink\").replace(bigiqmgmt,'localhost'))\r",
											"console.log(pm.variables.get(\"DeviceSelfLink\").replace(bigiqmgmt,'localhost'))\r",
											"postman.setEnvironmentVariable(\"NewDeviceLink\", pm.variables.get(\"DeviceSelfLink\").replace(bigiqmgmt,'localhost'));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"allowNat\":true,\r\n   \"allowSnat\":true,\r\n   \"description\":\"{{PoolDescription}}\",\r\n   \"ignorePersistedWeight\":false,\r\n   \"ipTosToClient\":null,\r\n   \"ipTosToServer\":null,\r\n   \"linkQosToClient\":65535,\r\n   \"linkQosToServer\":65535,\r\n   \"loadBalancingMode\":\"round-robin\",\r\n   \"monitorReferences\":[],\r\n   \"minActiveMembers\":0,\r\n   \"minUpMembers\":null,\r\n   \"queueDepthLimit\":0,\r\n   \"enableQueueOnConnectionLimit\":false,\r\n   \"queueTimeLimit\":0,\r\n   \"serviceDownAction\":\"none\",\r\n   \"slowRampTime\":10,\r\n   \"reselectTries\":0,\r\n   \"membersReference\":{\r\n      \"link\":\"\"\r\n   },\r\n   \"profiles\":[],\r\n   \"requestQueueTimeLimit\":0,\r\n   \"deviceReference\":{\r\n      \"link\":\"{{NewDeviceLink}}\"\r\n   },\r\n   \"partition\":\"Common\",\r\n   \"kind\":\"cm:adc-core:working-config:ltm:pool:adcpoolstate\",\r\n   \"name\":\"{{PoolName}}\",\r\n   \"{{MonitorTypeString}}\":[\r\n      {\r\n         \"name\":\"{{MonitorTypeName}}\",\r\n         \"partition\":\"Common\",\r\n         \"link\":\"{{MonitorSelfLink}}\"\r\n      }\r\n   ],\r\n   \"ipTosToClientControl\":\"pass-through\",\r\n   \"ipTosToServerControl\":\"pass-through\"\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Pool from Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"\r",
											"Inputs:\r",
											"    PoolID          - Programatic input (from another REST call) or User Input\r",
											"\r",
											"Outputs:\r",
											"    PoolName        - \r",
											"    PoolDescription - \r",
											"    PoolID          - \r",
											"    PoolJSON        - \r",
											"    PoolSelfLink    - \r",
											"    PoolSelfURI     - \r",
											"    PoolDeviceLink  - \r",
											"    PoolMembersLink - \r",
											"    PoolMembersURI  - \r",
											"    PoolMemberJSON  - \r",
											"    PoolMemberPort  - \r",
											"    PoolMemberID    - \r",
											"    PoolMonitorLink - \r",
											"    PoolMonitorURI  - \r",
											"\r",
											"*/\r",
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"console.log(\"Deleted Pool ID \"+pm.variables.get(\"PoolID\")+\" from BIGIQ device: \"+bigiqmgmt)\r",
											"\r",
											"postman.setEnvironmentVariable(\"PoolName\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolDescription\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolID\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolJSON\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolSelfLink\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolSelfURI\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolDeviceLink\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMembersLink\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMembersURI\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMemberJSON\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMemberPort\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMemberID\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMonitorLink\",\"\");\r",
											"postman.setEnvironmentVariable(\"PoolMonitorURI\",\"\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool/{{PoolID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										"{{PoolID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Pool Member from Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"console.log(bigiqmgmt)\r",
											"console.log(pm.variables.get(\"MonitorSelfLink\").replace(bigiqmgmt,'localhost'))\r",
											"console.log(pm.variables.get(\"DeviceSelfLink\").replace(bigiqmgmt,'localhost'))\r",
											"postman.setEnvironmentVariable(\"NewDeviceLink\", pm.variables.get(\"DeviceSelfLink\").replace(bigiqmgmt,'localhost'));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"/*\r",
											"Inputs:\r",
											"    PoolID          - The ID of the pool you wish to add a pool member to.\r",
											"    NodeSelfLink    - The Self Link to the node you wish to add as a pool member\r",
											"    NodeName        - The Name of the Node.\r",
											"    PoolMemberPort  - User supplied value. The port tehNode is listening on.\r",
											"    NodeDescription - User supplied value. The description for the Node.\r",
											"\r",
											"Outputs:\r",
											"    PoolMemberLink  - The link used in REST calls to refer to the Pool Members Collection, used in request bodies. (has \"localhost\" in the URL)\r",
											"    PoolMemberID    - The ID of the pool member.\r",
											"*/\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"postman.setEnvironmentVariable(\"PoolMemberLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"PoolMemberID\", jsonData.id);\r",
											"\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    console.log(\"Added Node to the Pool with the following properties:\")\r",
											"    console.log(\"Name: \"+jsonData.name)\r",
											"    console.log(\"Pool ID: \"+pm.variables.get(\"PoolID\"))\r",
											"    console.log(\"Pool Device Link \"+pm.variables.get(\"PoolDeviceLink\"))\r",
											"    console.log(\"Pool Members' Self Link \"+pm.variables.get(\"PoolMemberLink\"))\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"nodeReference\":{\r\n      \"link\":\"{{NodeSelfLink}}\"\r\n   },\r\n   \"ratio\":1,\r\n   \"priorityGroup\":0,\r\n   \"connectionLimit\":0,\r\n   \"rateLimit\":\"disabled\",\r\n   \"name\":\"{{NodeName}}:{{PoolMemberPort}}\",\r\n   \"description\":\"{{NodeDescription}}\",\r\n   \"partition\":\"Common\",\r\n   \"port\":\"{{PoolMemberPort}}\"\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool/{{PoolID}}/members",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										"{{PoolID}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Pool Member from Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"console.log(bigiqmgmt)\r",
											"console.log(pm.variables.get(\"MonitorSelfLink\").replace(bigiqmgmt,'localhost'))\r",
											"console.log(pm.variables.get(\"DeviceSelfLink\").replace(bigiqmgmt,'localhost'))\r",
											"postman.setEnvironmentVariable(\"NewDeviceLink\", pm.variables.get(\"DeviceSelfLink\").replace(bigiqmgmt,'localhost'));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// this doesn't currently work, it doesn't have the pool member ID from a node look up.\r",
											"\r",
											"/*\r",
											"Inputs:\r",
											"    PoolID          - The ID of the pool you wish to modify a pool member.\r",
											"    PoolMemberID    - The ID of the pool member you wish to delete.\r",
											"\r",
											"Outputs:\r",
											"    PoolMemberID    - The ID for the Pool Member that was deleted.\r",
											"*/\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    console.log(\"Deleted Node from the Pool Member with the following properties:\");\r",
											"    console.log(\"Name: \"+jsonData.name);\r",
											"    console.log(\"Pool Member ID: \"+pm.variables.get(\"PoolMemberID\")+\" (setting to blank)\");\r",
											"    console.log(\"Pool Device Link \"+pm.variables.get(\"PoolDeviceLink\"));\r",
											"    console.log(\"Pool Members Link \"+pm.variables.get(\"PoolMembersLink\"));\r",
											"}\r",
											"\r",
											"postman.setEnvironmentVariable(\"PoolMemberID\",\"\");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool/{{PoolID}}/members/{{PoolMemberID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										"{{PoolID}}",
										"members",
										"{{PoolMemberID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Pool's Members JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Note: This request currently has little value and may go away soon.\r",
											"\r",
											"Inputs:\r",
											"    PoolID          - The ID of the pool you wish to modify a pool member.\r",
											"\r",
											"Outputs:\r",
											"    PoolMemberJSON    - The JSON for the Pool Members Collection.\r",
											"*/\r",
											"\r",
											"console.log(\"Now modify the following JSON (inside the quotes)to post back to REST for modifying a pool after editing the JSON.\")\r",
											"console.log(responseBody)\r",
											"postman.setEnvironmentVariable(\"PoolMemberJSON\", responseBody);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool/{{PoolID}}/members",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										"{{PoolID}}",
										"members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Profile Functions",
					"item": [
						{
							"name": "Get ServerSSL Profile by Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileSearchName   - The name of the Profile being searched for.\r",
											"\r",
											"Outputs:\r",
											"    ProfileServerSSLID          - The ID of the requested profile.\r",
											"    ProfileServerSSLName        - The Name of the requested profile.\r",
											"    ProfileServerSSLSelfLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLSelfURI     - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileServerSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLParentURI   - A link, usable in making REST calls, referring to the requested profile's parent profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLChain       - The name of the Chain Certificate for the SSL/Key Pair assigned to the profile.\r",
											"    ProfileServerSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileServerSSLChainURI    - A link, usable in making REST calls, referring to the requested profile's assigned Chain Certificate. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileServerSSLKey         - The name of the SSL Key assigned to the profile.\r",
											"    ProfileServerSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileServerSSLKeyURI      - A link, usable in making REST calls, referring to the requested profile's assigned SSL Key. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLCert        - The name of the SSL Cert assigned to the profile.\r",
											"    ProfileServerSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileServerSSLCertURI     - A link, usable in making REST calls, referring to the requested profile's assigned SSL Cert. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLPassPhrase  - The passphrase for the certificate.\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"//console.log (profiles)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLID\", profileid);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLName\", jsonData.items[profile].name);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", jsonData.items[profile].selfLink);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLParentLink\", jsonData.items[profile].defaultsFromReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"\r",
											"        try {\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLChain\", jsonData.items[profile].chainReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLChainLink\", jsonData.items[profile].chainReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLChainURI\", jsonData.items[profile].chainReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        } catch (error) {\r",
											"            console.log (\"No Chain Found.\");\r",
											"        }\r",
											"\r",
											"        try {\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLKey\", jsonData.items[profile].keyReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLKeyLink\", jsonData.items[profile].keyReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLKeyURI\", jsonData.items[profile].keyReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        } catch (error) {\r",
											"            console.log (\"No Key Found.\");\r",
											"        }\r",
											"\r",
											"        try {\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLCert\", jsonData.items[profile].certReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLCertLink\", jsonData.items[profile].certReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLCertURI\", jsonData.items[profile].certReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        } catch (error) {\r",
											"            console.log (\"No Cert Found.\");\r",
											"        }\r",
											"\r",
											"        try {\r",
											"            postman.setEnvironmentVariable(\"ProfileServerSSLPassPhrase\", jsonData.items[profile].passphrase);\r",
											"        } catch {\r",
											"            console.log (\"No Passphrase Found.\");\r",
											"        }\r",
											"\r",
											"\r",
											"//create JSON\r",
											"if (pm.variables.get(\"ProfileServerSSLChain\") != \"\" || pm.variables.get(\"ProfileServerSSLChain\") != undefined ) {\r",
											"\r",
											"//chain reference\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\", \"\\\"certReference\\\": { \\\"name\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLChain\")+\"\\\", \\\"kind\\\": \\\"cm:adc-core:working-config:sys:file:ssl-cert:adcsslcertstate\\\", \\\"link\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLChainLink\")+\"\\\" },\");\r",
											"\r",
											"} else {\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\",\"\")\r",
											"}\r",
											"\r",
											"if (pm.variables.get(\"ProfileServerSSLCert\") != \"\" || pm.variables.get(\"ProfileServerSSLCert\") != undefined ) {\r",
											"\r",
											"//cert reference\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\", \"\\\"certReference\\\": { \\\"name\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLCert\")+\"\\\", \\\"kind\\\": \\\"cm:adc-core:working-config:sys:file:ssl-cert:adcsslcertstate\\\", \\\"link\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLCertLink\")+\"\\\" },\");\r",
											"\r",
											"} else {\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\",\"\");\r",
											"}\r",
											"\r",
											"if (pm.variables.get(\"ProfileServerSSLKey\") != \"\" || pm.variables.get(\"ProfileServerSSLKey\") != undefined ) {\r",
											"//key reference\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\\\"keyReference\\\": { \\\"name\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLKey\")+\"\\\", \\\"kind\\\": \\\"cm:adc-core:working-config:sys:file:ssl-key:adcsslkeystate\\\", \\\"link\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLKeyLink\")+\"\\\" },\");\r",
											"\r",
											"} else {\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\");\r",
											"}\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileServerSSLName\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileServerSSLID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileServerSSLSelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileServerSSLSelfURI\"))\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/server-ssl?$filter=name eq '*{{ProfileSearchName}}*'",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"server-ssl"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '*{{ProfileSearchName}}*'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Server SSL Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileServerSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileServerSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileServerSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileServerSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLName        - The Name of the requested profile.\r",
											"\r",
											"Outputs:\r",
											"    ProfileServerSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileServerSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileServerSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileServerSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLName        - The Name of the requested profile.\r",
											"    ProfileServerSSLID          - The ID of the requested profile.\r",
											"    ProfileServerSSLSelfLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLSelfURI     - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLParentURI   - A link, usable in making REST calls, referring to the requested profile's parent profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLChain       - The name of the Chain Certificate for the SSL/Key Pair assigned to the profile.\r",
											"    ProfileServerSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileServerSSLChainURI    - A link, usable in making REST calls, referring to the requested profile's assigned Chain Certificate. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLKey         - The name of the SSL Key assigned to the profile.\r",
											"    ProfileServerSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileServerSSLKeyURI      - A link, usable in making REST calls, referring to the requested profile's assigned SSL Key. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLCert        - The name of the SSL Cert assigned to the profile.\r",
											"    ProfileServerSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileServerSSLCertURI     - A link, usable in making REST calls, referring to the requested profile's assigned SSL Cert. (the URL contains the IP address of the BIG-IQ device)\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"//console.log (profiles)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLID\", profileid);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLName\", jsonData.items[profile].name);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", jsonData.items[profile].selfLink);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLParentLink\", jsonData.items[profile].defaultsFromReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLChain\", jsonData.items[profile].chainReference.name);\r",
											"        console.log(\"ProfileServerSSLChain is : \"+pm.variables.get(\"ProfileServerSSLChain\"));\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLChainLink\", jsonData.items[profile].chainReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLChainURI\", jsonData.items[profile].chainReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLKey\", jsonData.items[profile].keyReference.name);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLKeyLink\", jsonData.items[profile].keyReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLKeyURI\", jsonData.items[profile].keyReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLCert\", jsonData.items[profile].certReference.name);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLCertLink\", jsonData.items[profile].certReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileServerSSLCertURI\", jsonData.items[profile].certReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"\r",
											"\r",
											"//create JSON\r",
											"if (pm.variables.get(\"ProfileServerSSLChain\") != \"\" || pm.variables.get(\"ProfileServerSSLChain\") != undefined ) {\r",
											"\r",
											"//chain reference\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\",\"\\\"chainReference\\\": { \\\"kind\\\": \\\"cm:adc-core:working-config:sys:file:ssl-cert:adcsslcertstate\\\", \\\"link\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLChainLink\")+\"\\\", \\\"name\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLChain\")+\"\\\" },\");\r",
											"\r",
											"} else {\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\",\"\")\r",
											"}\r",
											"\r",
											"if (pm.variables.get(\"ProfileServerSSLCert\") != \"\" || pm.variables.get(\"ProfileServerSSLCert\") != undefined ) {\r",
											"\r",
											"//cert reference\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\", \"\\\"certReference\\\": { \\\"name\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLCert\")+\"\\\", \\\"kind\\\": \\\"cm:adc-core:working-config:sys:file:ssl-cert:adcsslcertstate\\\", \\\"link\\\": \\\" \"+pm.variables.get(\"ProfileServerSSLChainLink\")+\"\\\" },\");\r",
											"\r",
											"} else {\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\",\"\");\r",
											"}\r",
											"\r",
											"if (pm.variables.get(\"ProfileServerSSLKey\") != \"\" || pm.variables.get(\"ProfileServerSSLKey\") != undefined ) {\r",
											"//key reference\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\\\"keyReference\\\": { \\\"name\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLKey\")+\"\\\", \\\"kind\\\": \\\"cm:adc-core:working-config:sys:file:ssl-key:adcsslkeystate\\\", \\\"link\\\": \\\"\"+pm.variables.get(\"ProfileServerSSLKeyLink\")+\"\\\" },\");\r",
											"\r",
											"} else {\r",
											"    postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\");\r",
											"}\r",
											"\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileServerSSLName\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileServerSSLID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileServerSSLSelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileServerSSLSelfURI\"))\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"partition\": \"Common\",\r\n            \"ciphers\": \"DEFAULT\",\r\n            \"kind\": \"cm:adc-core:working-config:ltm:profile:server-ssl:adcprofileserversslstate\",\r\n            {{ProfileServerSSLKeyJSON}}\r\n            {{ProfileServerSSLCertJSON}}\r\n            {{ProfileServerSSLChainJSON}}\r\n            \"passphrase\": \"{{ProfileServerSSLPassPhrase}}\",\r\n            \"defaultsFromReference\": {\r\n                \"kind\": \"cm:adc-core:working-config:ltm:profile:server-ssl:adcprofileserversslstate\",\r\n                \"link\": \"{{ProfileServerSSLParentLink}}\",\r\n                \"name\": \"{{ProfileServerSSLParent}}\"\r\n            },\r\n            \"name\": \"{{ProfileServerSSLName}}\"\r\n        }"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/server-ssl/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"server-ssl",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Server SSL Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileServerSSLID          - The ID of the requested profile.\r",
											"\r",
											"Outputs:\r",
											"    None, Set to blank the following:\r",
											"    ProfileServerSSLID          - The ID of the requested profile.\r",
											"    ProfileServerSSLName        - The Name of the requested profile.\r",
											"    ProfileServerSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileServerSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLSelfLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileServerSSLSelfURI     - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLParentURI   - A link, usable in making REST calls, referring to the requested profile's parent profile. (the URL contains the IP address of the BIG-IQ device)\r",
											" \r",
											"    Currently does NOT blank the following:\r",
											"\r",
											"    ProfileServerSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileServerSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileServerSSLChain       - The name of the Chain Certificate for the SSL/Key Pair assigned to the profile.\r",
											"    ProfileServerSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileServerSSLChainURI    - A link, usable in making REST calls, referring to the requested profile's assigned Chain Certificate. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLKey         - The name of the SSL Key assigned to the profile.\r",
											"    ProfileServerSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileServerSSLKeyURI      - A link, usable in making REST calls, referring to the requested profile's assigned SSL Key. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a serverssl profile)\r",
											"    ProfileServerSSLCert        - The name of the SSL Cert assigned to the profile.\r",
											"    ProfileServerSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileServerSSLCertURI     - A link, usable in making REST calls, referring to the requested profile's assigned SSL Cert. (the URL contains the IP address of the BIG-IQ device)\r",
											"        \r",
											"*/\r",
											"\r",
											"profileid=jsonData.items[profile].id\r",
											"//gather data for environment Variables related to the object\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLParentLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLParentURI\", \"\");\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//log data saved\r",
											"console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"//log if verbose set to greater than 0, do not log if set to 0\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    //console.log(\"\")\r",
											"    console.log(\"updated the following environmental information:\")\r",
											"    console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileServerSSLName\"))\r",
											"    console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileServerSSLID\"))\r",
											"    console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileServerSSLSelfLink\"))\r",
											"    console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileServerSSLSelfURI\"))\r",
											"}\r",
											"//console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/server-ssl/{{ProfileServerSSLID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"server-ssl",
										"{{ProfileServerSSLID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Client SSL Profile by Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileSearchName           - The name of the profile being searched for.\r",
											"\r",
											"Outputs:\r",
											"    ProfileClientSSLID          - The ID of the requested profile.\r",
											"    ProfileClientSSLName        - The Name of the requested profile.\r",
											"    ProfileClientSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileClientSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLSelfLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLSelfURI     - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLParentURI   - A link, usable in making REST calls, referring to the requested profile's parent profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileClientSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileClientSSLChain       - The name of the Chain Certificate for the SSL/Key Pair assigned to the profile.\r",
											"    ProfileClientSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileClientSSLChainURI    - A link, usable in making REST calls, referring to the requested profile's assigned Chain Certificate. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLKey         - The name of the SSL Key assigned to the profile.\r",
											"    ProfileClientSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileClientSSLKeyURI      - A link, usable in making REST calls, referring to the requested profile's assigned SSL Key. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLCert        - The name of the SSL Cert assigned to the profile.\r",
											"    ProfileClientSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileClientSSLCertURI     - A link, usable in making REST calls, referring to the requested profile's assigned SSL Cert. (the URL contains the IP address of the BIG-IQ device)\r",
											"        \r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"//console.log (profiles)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLID\", profileid);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLName\", jsonData.items[profile].name);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", jsonData.items[profile].selfLink);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLParent\", jsonData.items[profile].defaultsFromReference.name)\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLParentLink\", jsonData.items[profile].defaultsFromReference.link)\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        try {\r",
											"            postman.setEnvironmentVariable(\"ProfileClientSSLChain\", jsonData.items[profile].certKeyChain[0].chainReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileClientSSLChainLink\", jsonData.items[profile].certKeyChain[0].chainReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileClientSSLChainURI\", jsonData.items[profile].certKeyChain[0].chainReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        } catch (error) {\r",
											"            console.log (\"No Chain Found.\");\r",
											"        }\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLKey\", jsonData.items[profile].certKeyChain[0].keyReference.name);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLKeyLink\", jsonData.items[profile].certKeyChain[0].keyReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLKeyURI\", jsonData.items[profile].certKeyChain[0].keyReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLCert\", jsonData.items[profile].certKeyChain[0].certReference.name);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLCertLink\", jsonData.items[profile].certKeyChain[0].certReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLCertURI\", jsonData.items[profile].certKeyChain[0].certReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        try {\r",
											"            postman.setEnvironmentVariable(\"ProfileClientSSLPassPhrase\", jsonData.items[profile].certKeyChain[0].passphrase);\r",
											"        } catch {\r",
											"            console.log (\"No Passphrase Found.\");\r",
											"        }\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileClientSSLName\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileClientSSLID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileClientSSLSelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileClientSSLSelfURI\"))\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/client-ssl?$filter=name eq '*{{ProfileSearchName}}*'",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"client-ssl"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '*{{ProfileSearchName}}*'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Client SSL Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileClientSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileClientSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileClientSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLName        - The Name of the requested profile.\r",
											"    ProfileClientSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileClientSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileClientSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileClientSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileClientSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileClientSSLName        - The Name of the requested profile.\r",
											"    ProfileClientSSLChain       - The name of the Chain Certificate for the SSL/Key Pair assigned to the profile.\r",
											"    ProfileClientSSLKey         - The name of the SSL Key assigned to the profile.\r",
											"    ProfileClientSSLCert        - The name of the SSL Cert assigned to the profile.\r",
											"\r",
											"Outputs:\r",
											"\r",
											"    ProfileClientSSLName        - The Name of the requested profile.\r",
											"    ProfileClientSSLID          - The ID of the requested profile.\r",
											"    ProfileClientSSLSelfLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLSelfURI     - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileClientSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLParentURI   - A link, usable in making REST calls, referring to the requested profile's parent profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileClientSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileClientSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileClientSSLChainURI    - A link, usable in making REST calls, referring to the requested profile's assigned Chain Certificate. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLKeyURI      - A link, usable in making REST calls, referring to the requested profile's assigned SSL Key. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLCertURI     - A link, usable in making REST calls, referring to the requested profile's assigned SSL Cert. (the URL contains the IP address of the BIG-IQ device)\r",
											"\r",
											"Currently does not populate the following:\r",
											"    ProfileClientSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileClientSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLID\", profileid);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLName\", jsonData.items[profile].name);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", jsonData.items[profile].selfLink);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLParent\", jsonData.items[profile].defaultsFromReference.name)\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLParentLink\", jsonData.items[profile].defaultsFromReference.link)\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLChainLink\", jsonData.items[profile].certKeyChain[0].chainReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLChainURI\", jsonData.items[profile].certKeyChain[0].chainReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLKeyLink\", jsonData.items[profile].certKeyChain[0].keyReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLKeyURI\", jsonData.items[profile].certKeyChain[0].keyReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLCertLink\", jsonData.items[profile].certKeyChain[0].certReference.link);\r",
											"        postman.setEnvironmentVariable(\"ProfileClientSSLCertURI\", jsonData.items[profile].certKeyChain[0].certReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileClientSSLName\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileClientSSLID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileClientSSLSelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileClientSSLSelfURI\"))\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n            \"partition\": \"Common\",\r\n            \"kind\": \"cm:adc-core:working-config:ltm:profile:client-ssl:adcprofileclientsslstate\",\r\n            \"defaultsFromReference\": {\r\n                \"link\": \"{{ProfileClientSSLParentLink}}\",\r\n                \"name\": \"{{ProfileClientSSLParent}}\"\r\n            },\r\n            \"certKeyChain\": [\r\n                {\r\n                    \"keyReference\": {\r\n                        \"link\": \"{{ProfileClientSSLKeyLink}}\",\r\n                        \"name\": \"{{ProfileClientSSLKey}}\"\r\n                    },\r\n                    \"name\": \"{{ProfileClientSSLChain}}\",\r\n                    \"chainReference\": {\r\n                        \"link\": \"{{ProfileClientSSLChainLink}}\",\r\n                        \"name\": \"{{ProfileClientSSLChain}}\"\r\n                    },\r\n                    \"passphrase\": \"{{ProfileClientSSLPassPhrase}}\",\r\n                    \"certReference\": {\r\n                        \"link\": \"{{ProfileClientSSLCertLink}}\",\r\n                        \"name\": \"{{ProfileClientSSLCert}}\"\r\n                    }\r\n                }\r\n            ],\r\n            \"name\": \"{{ProfileClientSSLName}}\"\r\n        }"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/client-ssl/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"client-ssl",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Client SSL Profile from Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileClientSSLID          - The ID of the requested profile.\r",
											"\r",
											"Outputs:\r",
											"    Blanks out the following:\r",
											"    ProfileClientSSLID          - The ID of the requested profile.\r",
											"    ProfileClientSSLName        - The Name of the requested profile.\r",
											"    ProfileClientSSLSelfLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLSelfURI     - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLParent      - The name of the parent profile to the profile requested.\r",
											"    ProfileClientSSLParentLink  - A link, usable in the REST call's JSON in the request body, referring to the requested profile's parent profile. (the URL contains \"local host\")\r",
											"    ProfileClientSSLParentURI   - A link, usable in making REST calls, referring to the requested profile's parent profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLChainLink   - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned Chain Certificate. (the URL contains \"local host\")\r",
											"    ProfileClientSSLChainURI    - A link, usable in making REST calls, referring to the requested profile's assigned Chain Certificate. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLKeyLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Key. (the URL contains \"local host\")\r",
											"    ProfileClientSSLKeyURI      - A link, usable in making REST calls, referring to the requested profile's assigned SSL Key. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLCertLink    - A link, usable in the REST call's JSON in the request body, referring to the requested profile's assigned SSL Cert. (the URL contains \"local host\")\r",
											"    ProfileClientSSLCertURI     - A link, usable in making REST calls, referring to the requested profile's assigned SSL Cert. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileClientSSLChainJSON   - The JSON to be inserted, if created or modified, into the request body to add a Chain Cert. This shoule be blank if there is no Chain Certificate.\r",
											"    ProfileClientSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLCertJSON    - The JSON to be inserted, if created or modified, into the request body to add a Cert. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLPassPhrase  - The passphrase for the certificate.\r",
											"    ProfileClientSSLChain       - The name of the Chain Certificate for the SSL/Key Pair assigned to the profile.\r",
											"    ProfileClientSSLKey         - The name of the SSL Key assigned to the profile.\r",
											"    ProfileClientSSLKeyJSON     - The JSON to be inserted, if created or modified, into the request body to add a Key. This shoule be blank if there is no SSL Key. (This should never happen for a Clientssl profile)\r",
											"    ProfileClientSSLCert        - The name of the SSL Cert assigned to the profile.\r",
											"\r",
											"*/\r",
											"\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLParentLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLParentURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChainLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChainURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKeyLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKeyURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCertLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCertURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChainJSON\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKeyJSON\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCertJSON\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLPassPhrase\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChain\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKey\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKeyJSON\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCert\", \"\");\r",
											"\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    //console.log(\"\")\r",
											"    console.log(\"updated the following environmental information:\")\r",
											"    console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileClientSSLName\"))\r",
											"    console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileClientSSLID\"))\r",
											"    console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileClientSSLSelfLink\"))\r",
											"    console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileClientSSLSelfURI\"))\r",
											"}\r",
											"//console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/client-ssl/{{ProfileClientSSLID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"client-ssl",
										"{{ProfileClientSSLID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TCP Profile by Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileSearchName          - The Name of the requested profile.\r",
											"\r",
											"Outputs:\r",
											"    ProfileTCPID                    - The TCP Profile's ID\r",
											"    ProfileTCPName                  - The Name of the TCP Profile\r",
											"    ProfileTCPSelfLink              - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileTCPSelfURI               - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewProfileType                  - The type of Profile to create, always \"tcp\" for TCP profiles.\r",
											"    NewProfileParent                - The name of the new profile\r",
											"    ProfileTCPParent                - The name of the Parent Profile.\r",
											"    ProfileTCPParentLink            - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileTCPParentURI             - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileTCPidleTimeout           - The Idle Timeout value for the profile, default is 300\r",
											"    ProfileTCPidleTimeoutJSON       - The JSON to use in the request body if the timeout is different than 300.\r",
											"    ProfileTCPisVerifiedAccept      - The value of the Verified Accept setting in the profile. Not, enabling this is not a recommended setting. This chnages the order of packet flow and could impact iRules negatively.\r",
											"    ProfileTCPisVerifiedAcceptJSON  - The JSON to use in the request body if the Verified Accept setting is enabled.\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"//console.log (profiles)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        \r",
											"        // Handle TCP Profile specific functions\r",
											"        if (jsonData.items[profile].defaultsFromReference.name == \"tcp\" || jsonData.items[profile].defaultsFromReference.name == \"tcp-legacy\") {\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPID\", profileid);\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPName\", jsonData.items[profile].name);\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", jsonData.items[profile].selfLink);\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"NewProfileType\", \"tcp\");\r",
											"            postman.setEnvironmentVariable(\"NewProfileParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPParentLink\", jsonData.items[profile].defaultsFromReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileTCPParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"\r",
											"            //profile customizations\r",
											"            ProfileTCPidleTimeout = jsonData.items[profile].idleTimeout;\r",
											"            ProfileTCPisNoWrite = jsonData.items[profile].isNoWrite;\r",
											"            ProfileTCPisFastOpen = jsonData.items[profile].isFastOpen;\r",
											"            ProfileTCPisVerifiedAccept = jsonData.items[profile].isVerifiedAccept;\r",
											"\r",
											"            //support idletimeout setting, 300 is the default for both tcp and tcp-legacy\r",
											"            // ** Note: if the parent profile is something other than tcp or tcp legacy-- this could break! **\r",
											"            if (ProfileTCPidleTimeout == \"300\" || ProfileTCPidleTimeout == undefined || ProfileTCPidleTimeout == \"\" ) {\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\",\"\");\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\",\"\");\r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\",ProfileTCPidleTimeout);\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\",  \"      \\\"idleTimeout\\\": \"+ProfileTCPidleTimeout+\",\");\r",
											"            }\r",
											"\r",
											"            //support isVerifiedAccept setting, false is the default. This is a dangerous setting since it changes the packet order and flow. See the context specific help in the TM UI for more details.\r",
											"            if (ProfileTCPisVerifiedAccept == false || ProfileTCPisVerifiedAccept == undefined || ProfileTCPisVerifiedAccept == \"\" ) {\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\",\"\");\r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\", ProfileTCPisVerifiedAccept);\r",
											"                postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAcceptJSON\",  \"      \\\"isVerifiedAccept\\\": \"+ProfileTCPisVerifiedAccept+\",\");\r",
											"            }\r",
											"        }\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileTCPName\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileTCPID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileTCPSelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileTCPSelfURI\"))\r",
											"            console.log(\"Set New Profile Type to: \"+pm.variables.get(\"NewProfileType\"))\r",
											"            console.log(\"Set New Profile Parent to: \"+pm.variables.get(\"NewProfileParent\"))\r",
											"            console.log(\"Set profile TCP Parent to: \"+pm.variables.get(\"ProfileTCPParent\"))\r",
											"\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/tcp/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"tcp",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create TCP Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    NewProfileType                  - The type of Profile to create, always \"tcp\" for TCP profiles.\r",
											"\r",
											"Outputs:\r",
											"    ProfileTCPID                    - The TCP Profile's ID\r",
											"    ProfileTCPName                  - The Name of the TCP Profile\r",
											"    ProfileTCPSelfLink              - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileTCPSelfURI               - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewProfileParent                - The name of the new profile\r",
											"    ProfileTCPParent                - The name of the Parent Profile.\r",
											"    ProfileTCPParentLink            - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileTCPParentURI             - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileTCPidleTimeout           - The Idle Timeout value for teh profile, default is 300\r",
											"    ProfileTCPidleTimeoutJSON       - The JSON to use in the request body if the timeout is different than 300.\r",
											"    ProfileTCPisVerifiedAccept      - The value of the Verified Accept setting in the profile. Not, enabling this is not a recommended setting. This chnages the order of packet flow and could impact iRules negatively.\r",
											"    ProfileTCPisVerifiedAcceptJSON  - The JSON to use in the request body if the Verified Accept setting is enabled.\r",
											"\r",
											"*/\r",
											"\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"postman.setEnvironmentVariable(\"ProfileTCPID\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", jsonData.selfLink)\r",
											"postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt))\r",
											"\r",
											"/* Need to add these\r",
											"postman.setEnvironmentVariable(\"ProfileTCPName\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParent\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParentLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParentURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAcceptJSON\",\"\")\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"kind\": \"cm:adc-core:working-config:ltm:profile:tcp:adcprofiletcpstate\",\r\n    \"name\": \"{{ProfileTCPName}}\",\r\n    \"partition\": \"Common\",\r\n    {{ProfileTCPidleTimeoutJSON}}\r\n    {{ProfileTCPisVerifiedAcceptJSON}}\r\n    \"defaultsFromReference\": {\r\n        \"link\": \"{{ProfileTCPParentLink}}\",\r\n        \"name\": \"{{ProfileTCPParent}}\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/{{NewProfileType}}/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"{{NewProfileType}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete TCP Profile from Environment Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileTCPID                    - The TCP Profile's ID\r",
											"\r",
											"Outputs:\r",
											"    Sets teh following to blank:\r",
											"    ProfileTCPID                    - The TCP Profile's ID\r",
											"    ProfileTCPName                  - The Name of the TCP Profile\r",
											"    ProfileTCPSelfLink              - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileTCPSelfURI               - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewProfileType                  - The type of profile, always \"tcp\" for TCP Profiles.\r",
											"    NewProfileParent                - The name of the new profile\r",
											"    ProfileTCPParent                - The name of the Parent Profile.\r",
											"    ProfileTCPParentLink            - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileTCPParentURI             - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileTCPidleTimeout           - The Idle Timeout value for the profile, default is 300\r",
											"    ProfileTCPidleTimeoutJSON       - The JSON to use in the request body if the timeout is different than 300.\r",
											"    ProfileTCPisVerifiedAccept      - The value of the Verified Accept setting in the profile. Not, enabling this is not a recommended setting. This chnages the order of packet flow and could impact iRules negatively.\r",
											"    ProfileTCPisVerifiedAcceptJSON  - The JSON to use in the request body if the Verified Accept setting is enabled.\r",
											"\r",
											"*/\r",
											"\r",
											"postman.setEnvironmentVariable(\"ProfileTCPID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileType\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParentLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParentURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAcceptJSON\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/tcp/{{ProfileTCPID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"tcp",
										"{{ProfileTCPID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get FastL4 Profile by Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileSearchName                    - The name of the fastl4 profile being searched for by name.\r",
											"\r",
											"Outputs:\r",
											"    ProfileFastL4ID                 - The ID of the fastl4 profile being searched for.\r",
											"    ProfileFastL4Name               - The Name of the fastl4 profile found.\r",
											"    ProfileFastL4SelfLink           - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileFastL4SelfURI            - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewProfileType                  - The type of Profile to create, always \"fastl4\" for fastl4 profiles.\r",
											"    NewProfileParent                - The name of the parent profile for the new profile.\r",
											"    ProfileFastL4Parent             - The name of the parent profile.\r",
											"    ProfileFastL4ParentLink         - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileFastL4ParentURI          - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileFastL4idleTimeout        - The Idle Timeout value for the profile, default is 300\r",
											"    ProfileFastL4idleTimeoutJSON    - The JSON to use in the request body if the timeout is different than 300.\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"//console.log (profiles)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        \r",
											"        // Handle TCP Profile specific functions\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4ID\", profileid);\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4Name\", jsonData.items[profile].name);\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", jsonData.items[profile].selfLink);\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"NewProfileType\", \"fastl4\");\r",
											"            postman.setEnvironmentVariable(\"NewProfileParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4Parent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4ParentLink\", jsonData.items[profile].defaultsFromReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileFastL4ParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"\r",
											"            //profile customizations\r",
											"            ProfileFastL4idleTimeout = jsonData.items[profile].idleTimeout;\r",
											"//            ProfileFastL4isNoWrite = jsonData.items[profile].isNoWrite;\r",
											"//            ProfileFastL4isFastOpen = jsonData.items[profile].isFastOpen;\r",
											"//            ProfileFastL4isVerifiedAccept = jsonData.items[profile].isVerifiedAccept;\r",
											"\r",
											"            if (ProfileFastL4idleTimeout == \"300\" || ProfileFastL4idleTimeout == undefined || ProfileFastL4idleTimeout == \"\" ) {\r",
											"                postman.setEnvironmentVariable(\"ProfileFastL4idleTimeout\",\"\");\r",
											"                postman.setEnvironmentVariable(\"ProfileFastL4idleTimeoutJSON\",\"\");\r",
											"            }\r",
											"            else\r",
											"            {\r",
											"                postman.setEnvironmentVariable(\"ProfileFastL4idleTimeout\",ProfileFastL4idleTimeout);\r",
											"                postman.setEnvironmentVariable(\"ProfileFastL4idleTimeoutJSON\",  \"      \\\"idleTimeout\\\": \"+ProfileFastL4idleTimeout+\",\");\r",
											"            }\r",
											"\r",
											"\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileFastL4Name\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileFastL4ID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileFastL4SelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileFastL4SelfURI\"))\r",
											"            console.log(\"Set New Profile Type to: \"+pm.variables.get(\"NewProfileType\"))\r",
											"            console.log(\"Set New Profile Parent to: \"+pm.variables.get(\"NewProfileParent\"))\r",
											"            console.log(\"Set profile FastL4 Parent to: \"+pm.variables.get(\"ProfileFastL4Parent\"))\r",
											"\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/fastl4/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"fastl4",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create FastL4 Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    NewProfileType\r",
											"    ProfileFastL4Name               - The Name of the fastl4 profile found.\r",
											"    ProfileFastL4idleTimeoutJSON    - The JSON to use in the request body if the timeout is different than 300.\r",
											"    ProfileFastL4Parent             - The name of the parent profile.\r",
											"    ProfileFastL4ParentLink         - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    \r",
											"Outputs:\r",
											"    ProfileFastL4ID                 - The ID of the fastl4 profile being searched for.\r",
											"    ProfileFastL4Name               - The Name of the fastl4 profile found.\r",
											"    ProfileFastL4SelfLink           - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileFastL4SelfURI            - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"\r",
											"It currently does NOT update the following:\r",
											"    NewProfileType                  - The type of Profile to create, always \"fastl4\" for fastl4 profiles.\r",
											"    NewProfileParent                - The name of the parent profile for the new profile.\r",
											"    ProfileFastL4Parent             - The name of the parent profile.\r",
											"    ProfileFastL4ParentLink         - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileFastL4ParentURI          - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileFastL4idleTimeout        - The Idle Timeout value for the profile, default is 300\r",
											"    ProfileFastL4idleTimeoutJSON    - The JSON to use in the request body if the timeout is different than 300.\r",
											"*/\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ID\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4Name\", jsonData.name);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "        {\r\n            \"kind\": \"cm:adc-core:working-config:ltm:profile:fastl4:adcprofilefastl4state\",\r\n            \"name\": \"{{ProfileFastL4Name}}\",\r\n            \"partition\": \"Common\",\r\n            \"isNoDelete\": false,\r\n            {{ProfileFastL4idleTimeoutJSON}}\r\n            \"defaultsFromReference\": {\r\n                \"link\": \"{{ProfileFastL4ParentLink}}\",\r\n                \"name\": \"{{ProfileFastL4Parent}}\"\r\n            }\r\n        }"
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/profile/{{NewProfileType}}/",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"{{NewProfileType}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete FastL4 Profile From Environment Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileFastL4ID                 - The ID of the fastl4 profile being searched for.\r",
											"    \r",
											"Outputs:\r",
											"\r",
											"    Sets the following to blank:\r",
											"        ProfileFastL4ID                 - The ID of the fastl4 profile being searched for.\r",
											"        ProfileFastL4Name               - The Name of the fastl4 profile found.\r",
											"        ProfileFastL4SelfLink           - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"        ProfileFastL4SelfURI            - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"        NewProfileType                  - The type of Profile to create, always \"fastl4\" for fastl4 profiles.\r",
											"        ProfileFastL4Parent             - The name of the parent profile.\r",
											"        ProfileFastL4ParentLink         - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"        ProfileFastL4ParentURI          - A link, usable in making REST call's JSON, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device.)\r",
											"        ProfileFastL4ID                 - The ID of the fastl4 profile being searched for.\r",
											"        ProfileFastL4Name               - The Name of the fastl4 profile found.\r",
											"        ProfileFastL4idleTimeoutJSON    - The JSON to use in the request body if the timeout is different than 300.\r",
											"        ProfileFastL4idleTimeout        - The Idle Timeout value for the profile, default is 300\r",
											"\r",
											"*/\r",
											"\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileType\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4Parent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ParentLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ParentURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeout\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeoutJSON\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\", \"\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/fastl4/{{ProfileFastL4ID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"fastl4",
										"{{ProfileFastL4ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HTTP Profile by Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Inputs:\r",
											"    ProfileSearchName                    - The name of the HTTP profile being searched for by name.\r",
											"\r",
											"Outputs:\r",
											"    ProfileHTTPID           - The ID of the HTTP profile being searched for.\r",
											"    ProfileHTTPName         - The Name of the HTTP profile found.\r",
											"    ProfileHTTPSelfLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileHTTPSelfURI      - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewProfileType          - The type of Profile to create, always \"HTTP\" for HTTP profiles.\r",
											"    NewProfileParent        - The name of the parent profile for the new profile.\r",
											"    ProfileHTTPParent       - The name of the parent profile.\r",
											"    ProfileHTTPParentLink   - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileHTTPParentURI    - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileHTTPXFF          - The state of the InsertXFF setting that, when enabled, inserts the client source address into the HTTP Headers of teh Server side connection.\r",
											"\r",
											"*/\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let profiles = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"profiles = jsonData.items;\r",
											"//console.log (profiles)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"ProfileSearchName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"for (profile in profiles){\r",
											"    if (jsonData.items[profile].name == searchname) {\r",
											"        profileid=jsonData.items[profile].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        \r",
											"        // Handle HTTP Profile specific functions\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPID\", profileid);\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPName\", jsonData.items[profile].name);\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", jsonData.items[profile].selfLink);\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", jsonData.items[profile].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"NewProfileType\", \"http\");\r",
											"            postman.setEnvironmentVariable(\"NewProfileParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPParent\", jsonData.items[profile].defaultsFromReference.name);\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPParentLink\", jsonData.items[profile].defaultsFromReference.link);\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPParentURI\", jsonData.items[profile].defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"ProfileHTTPXFF\", jsonData.items[profile].isInsertXforwardedForEnabled);\r",
											"            //profile customizations\r",
											"            \r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific profile's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set profile name to: \"+pm.variables.get(\"ProfileHTTPName\"))\r",
											"            console.log(\"Set profile ID to: \"+pm.variables.get(\"ProfileHTTPID\"))\r",
											"            console.log(\"Set profile Self Link to: \"+pm.variables.get(\"ProfileHTTPSelfLink\"))\r",
											"            console.log(\"Set profile Self URI to: \"+pm.variables.get(\"ProfileHTTPSelfURI\"))\r",
											"            console.log(\"Set New Profile Type to: \"+pm.variables.get(\"NewProfileType\"))\r",
											"            console.log(\"Set New Profile Parent to: \"+pm.variables.get(\"NewProfileParent\"))\r",
											"            console.log(\"Set profile HTTP Parent to: \"+pm.variables.get(\"ProfileHTTPParent\"))\r",
											"\r",
											"        }\r",
											"        //console.log (\"Gathering the specific profile's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/http/?$filter=name eq '*{{ProfileSearchName}}*'",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"http",
										""
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '*{{ProfileSearchName}}*'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create HTTP Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Pre-Reqs:\r",
											"\r",
											"Inputs:\r",
											"    ProfileHTTPName         - The Name of the HTTP profile found.\r",
											"    ProfileHTTPXFF          - The state of the InsertXFF setting that, when enabled, inserts the client source address into the HTTP Headers of teh Server side connection.\r",
											"Outputs:\r",
											"    ProfileHTTPID           - The ID of the HTTP profile being searched for.\r",
											"    ProfileHTTPName         - The Name of the HTTP profile found.\r",
											"    ProfileHTTPSelfLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"    ProfileHTTPSelfURI      - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewProfileType          - The type of Profile to create, always \"HTTP\" for HTTP profiles.\r",
											"    NewProfileParent        - The name of the parent profile for the new profile.\r",
											"    ProfileHTTPParent       - The name of the parent profile.\r",
											"    ProfileHTTPParentLink   - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"    ProfileHTTPParentURI    - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileHTTPID           - The ID of the HTTP profile being searched for.\r",
											"*/\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"var bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPID\", jsonData.id);\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPName\", jsonData.name);\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"NewProfileType\", \"http\");\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\", jsonData.defaultsFromReference.name);\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPParent\", jsonData.defaultsFromReference.name);\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPParentLink\", jsonData.defaultsFromReference.link);\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPParentURI\", jsonData.defaultsFromReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPXFF\", jsonData.isInsertXforwardedForEnabled);\r",
											"\r",
											"//postman.setEnvironmentVariable(\"xxxxx\", jsonData.xxxx);\r",
											"\r",
											"\r",
											"if (pm.variables.get(\"BeVerbose\")) {\r",
											"    console.log(\"Created http Profile with the following properties:\")\r",
											"    console.log(\"Name: \"+jsonData.name)\r",
											"    console.log(\"ID: \"+pm.variables.get(\"ProfileHTTPID\"))\r",
											"    console.log(\"SelfLink\"+pm.variables.get(\"ProfileHTTPSelfLink\"))\r",
											"    console.log(\"SelfURI\"+pm.variables.get(\"ProfileHTTPSelfURI\"))\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "       {\r\n            \"kind\": \"cm:adc-core:working-config:ltm:profile:http:adcprofilehttpstate\",\r\n            \"name\": \"{{ProfileHTTPName}}\",\r\n            \"partition\": \"Common\",\r\n            \"isInsertXforwardedForEnabled\": {{ProfileHTTPXFF}}\r\n        }"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/http/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"http",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete HTTP Profile From Environment Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Pre-Reqs:\r",
											"\r",
											"Inputs:\r",
											"    ProfileHTTPID           - The ID of the HTTP profile being searched for.\r",
											"Outputs:\r",
											"    Sets teh following to Blank:\r",
											"        ProfileHTTPID           - The ID of the HTTP profile being searched for.\r",
											"        ProfileHTTPName         - The Name of the HTTP profile found.\r",
											"        ProfileHTTPSelfLink     - A link, usable in the REST call's JSON in the request body, referring to the requested profile. (the URL contains \"local host\")\r",
											"        ProfileHTTPSelfURI      - A link, usable in making REST calls, referring to the requested profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"        NewProfileType          - The type of Profile to create, always \"HTTP\" for HTTP profiles.\r",
											"        NewProfileParent        - The name of the parent profile for the new profile.\r",
											"        ProfileHTTPParent       - The name of the parent profile.\r",
											"        ProfileHTTPParentLink   - A link, usable in the REST call's JSON in the request body, referring to the requested PARENT profile. (the URL contains \"local host\")\r",
											"        ProfileHTTPParentURI    - A link, usable in making REST calls, referring to the requested PARENT profile. (the URL contains the IP address of the BIG-IQ device)\r",
											"        ProfileHTTPXFF          - The state of the InsertXFF setting that, when enabled, inserts the client source address into the HTTP Headers of teh Server side connection.\r",
											"*/\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileType\", \"\");\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPParent\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPParentLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPParentURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPXFF\", \"\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/profile/http/{{ProfileHTTPID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"http",
										"{{ProfileHTTPID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Virtual Server Functions",
					"item": [
						{
							"name": "Create Virtual Server from Environment Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Notes:\r",
											"    You will want to be certain to set the variable NewVirtualTemplate before running this, the value is an integer that is a bitmask and the bits are:\r",
											"    1 - TCP Profile (or 1)\r",
											"    2 - HTTP Profile (or 2)\r",
											"    3 - Client SSL Profile (or 4)\r",
											"    4 - Server SSL Profile (or 8)\r",
											"    5 = FastL4 Profile  (or 16)\r",
											"\r",
											"The following values will give you the type of virtual server referenced:\r",
											"    \"TCP\" Virtual Server - 1\r",
											"    \"HTTP\" Virtual Server - 3\r",
											"    \"SSL Offload\" Virtual Server - 7 \r",
											"    \"SSL Bridge\" Virtual Server - 15\r",
											"    \"FastL4\" Virtual Server - 16\r",
											"\r",
											"Inputs:\r",
											"\r",
											"Outputs:\r",
											"\r",
											"*/\r",
											"\r",
											"NewVirtualTemplate = pm.variables.get(\"NewVirtualTemplate\");\r",
											"\r",
											"//Init Profile Creation variables/triggers\r",
											"DoTCPProfile = 0;\r",
											"DoHTTPProfile = 0;\r",
											"DoClientSSLProfile = 0;\r",
											"DoServerSSLProfile = 0;\r",
											"DoFastL4Profile = 0;\r",
											"\r",
											"//determine which profiles need to be created from the bitmask\r",
											"console.log(\"NewVirtualTemplate has a value of \" + NewVirtualTemplate);\r",
											"switch (NewVirtualTemplate)\r",
											"{\r",
											"    case \"0\":\r",
											"        throw new Error(\"*FAILURE!* NewVirtualTemplate is set to 0, this is an invalid setting, double check this variable and try again.\");\r",
											"    case \"1\":\r",
											"        // TCP only\r",
											"        DoTCPProfile = 1;\r",
											"        DoHTTPProfile = 0;\r",
											"        DoClientSSLProfile = 0;\r",
											"        DoServerSSLProfile = 0;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"2\":\r",
											"        //HTTP Only\r",
											"        DoTCPProfile = 0;\r",
											"        DoHTTPProfile = 1;\r",
											"        DoClientSSLProfile = 0;\r",
											"        DoServerSSLProfile = 0;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"3\":\r",
											"        // This is a \"HTTP\" Virtual Server\r",
											"        DoTCPProfile = 1;\r",
											"        DoHTTPProfile = 1;\r",
											"        DoClientSSLProfile = 0;\r",
											"        DoServerSSLProfile = 0;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"4\":\r",
											"        // ClientSSL Only\r",
											"        DoTCPProfile = 0;\r",
											"        DoHTTPProfile = 0;\r",
											"        DoClientSSLProfile = 1;\r",
											"        DoServerSSLProfile = 0;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"7\":\r",
											"        // This is a \"\"SSL Offload\"\" Virtual Server\r",
											"        DoTCPProfile = 1;\r",
											"        DoHTTPProfile = 1;\r",
											"        DoClientSSLProfile = 1;\r",
											"        DoServerSSLProfile = 0;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"8\":\r",
											"        // ServerSSL Only\r",
											"        DoTCPProfile = 0;\r",
											"        DoHTTPProfile = 0;\r",
											"        DoClientSSLProfile = 0;\r",
											"        DoServerSSLProfile = 1;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"15\":\r",
											"        // This is a \"\"SSL Bridge\"\" Virtual Server\r",
											"        DoTCPProfile = 1;\r",
											"        DoHTTPProfile = 1;\r",
											"        DoClientSSLProfile = 1;\r",
											"        DoServerSSLProfile = 1;\r",
											"        DoFastL4Profile = 0;\r",
											"    break;\r",
											"    case \"16\":\r",
											"        // FastL4 only\r",
											"        DoTCPProfile = 0;\r",
											"        DoHTTPProfile = 0;\r",
											"        DoClientSSLProfile = 0;\r",
											"        DoServerSSLProfile = 0;\r",
											"        DoFastL4Profile = 1;\r",
											"    break;\r",
											"    default:\r",
											"        throw new Error(\"*FAILURE!* NewVirtualTemplate does not contain a valid value, double check this variable and try again.\");\r",
											"}\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"virtualid=jsonData.id\r",
											"postman.setEnvironmentVariable(\"VirtualName\", jsonData.name);\r",
											"postman.setEnvironmentVariable(\"VirtualID\", virtualid);\r",
											"postman.setEnvironmentVariable(\"VirtualSelfLink\", jsonData.selfLink);\r",
											"postman.setEnvironmentVariable(\"VirtualSelfURI\", jsonData.selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"PoolSelfLink\", jsonData.poolReference.link);\r",
											"postman.setEnvironmentVariable(\"PoolSelfURI\", jsonData.poolReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"VirtualDeviceLink\", jsonData.deviceReference.link);\r",
											"postman.setEnvironmentVariable(\"VirtualDeviceURI\", jsonData.deviceReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"DeviceID\", jsonData.deviceReference.id);\r",
											"postman.setEnvironmentVariable(\"DeviceSelfLink\", jsonData.deviceReference.link);\r",
											"postman.setEnvironmentVariable(\"DeviceSelfURI\", jsonData.deviceReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"VirtualProfilesLink\", jsonData.profilesCollectionReference.link);\r",
											"postman.setEnvironmentVariable(\"VirtualProfilesURI\", jsonData.profilesCollectionReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"postman.setEnvironmentVariable(\"VirtualDestinationAddress\", jsonData.destinationAddress);\r",
											"postman.setEnvironmentVariable(\"VirtualMask\", jsonData.mask);\r",
											"postman.setEnvironmentVariable(\"VirtualSNATType\", jsonData.sourceAddressTranslation.type);\r",
											"if (jsonData.sourceAddressTranslation.type == \"snat\")\r",
											"{\r",
											"    postman.setEnvironmentVariable(\"VirtualSNATPoolName\", jsonData.sourceAddressTranslation.snatpoolReference.name);\r",
											"    postman.setEnvironmentVariable(\"VirtualSNATPoolID\", jsonData.sourceAddressTranslation.snatpoolReference.id);\r",
											"    postman.setEnvironmentVariable(\"VirtualSNATPoolSelfURI\", jsonData.sourceAddressTranslation.snatpoolReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"    postman.setEnvironmentVariable(\"VirtualSNATPoolSelfLink\", jsonData.sourceAddressTranslation.snatpoolReference.link);\r",
											"}\r",
											"\r",
											"//now get the virtual server's JSON inline\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"const options = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"VirtualSelfURI\"),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"        console.log(\"Found JSON for Virtual, storing in Environment variable 'VirtualJSON'\")\r",
											"        postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"    }\r",
											"});\r",
											"\r",
											"//DoClientSSLProfile = 1;\r",
											"if (DoClientSSLProfile == 1) {\r",
											"    // Set the Prfiles reference with VirtualProfilesURI\r",
											"    const ClientSSLOptions = {\r",
											"        method: 'POST',\r",
											"        url: pm.variables.get(\"VirtualProfilesURI\"),\r",
											"        header: 'ContentType: application/json',\r",
											"        header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"        body: '{'+\r",
											"    '\"name\": \"clientssl\",'+\r",
											"    '\"partition\": \"Common\",'+\r",
											"    '      \"profileClientsslReference\": {'+\r",
											"    '          \"kind\": \"cm:adc-core:working-config:ltm:profile:client-ssl:adcprofileclientsslstate\",'+\r",
											"    '          \"link\": \"'+ pm.variables.get(\"ProfileClientSSLSelfLink\") + '\",'+\r",
											"    '          \"name\": \"'+ pm.variables.get(\"ProfileClientSSLName\") + '\"'+\r",
											"    '      },'+\r",
											"    '  \"context\": \"all\"'+\r",
											"    '}'\r",
											"    }\r",
											"\r",
											"    // attach ClientSSL Profile\r",
											"    pm.sendRequest(ClientSSLOptions, (error, response) => {\r",
											"        if (error) {\r",
											"            throw new Error(error);\r",
											"        } else {\r",
											"            console.log(\"Attached ClientSSL profile...\")\r",
											"            //postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"//DoHTTPProfile = 1;\r",
											"if (DoHTTPProfile == 1) {\r",
											"    // attach HTTP Profile\r",
											"    const HTTPOptions = {\r",
											"        method: 'POST',\r",
											"        url: pm.variables.get(\"VirtualProfilesURI\"),\r",
											"        header: 'ContentType: application/json',\r",
											"        header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"        body: '{'+\r",
											"    '\"name\": \"http\",'+\r",
											"    '\"partition\": \"Common\",'+\r",
											"            '\"profileHttpReference\": {'+\r",
											"                '\"kind\": \"cm:adc-core:working-config:ltm:profile:http:adcprofilehttpstate\",'+\r",
											"    '          \"link\": \"'+ pm.variables.get(\"ProfileHTTPSelfLink\") + '\",'+\r",
											"    '          \"name\": \"'+ pm.variables.get(\"ProfileHTTPName\") + '\"'+\r",
											"            '},'+\r",
											"    '  \"context\": \"all\"'+\r",
											"    '}'\r",
											"    }\r",
											"\r",
											"    pm.sendRequest(HTTPOptions, (error, response) => {\r",
											"        if (error) {\r",
											"            throw new Error(error);\r",
											"        } else {\r",
											"            console.log(\"Attached HTTP profile...\")\r",
											"            //postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"//DoTCPProfile = 1;\r",
											"if (DoTCPProfile == 1) {\r",
											"    // attach TCP Profile\r",
											"    const TCPOptions = {\r",
											"        method: 'POST',\r",
											"        url: pm.variables.get(\"VirtualProfilesURI\"),\r",
											"        header: 'ContentType: application/json',\r",
											"        header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"        body: '{'+\r",
											"    '\"name\": \"tcp\",'+\r",
											"    '\"partition\": \"Common\",'+\r",
											"            '\"profileTcpReference\": {'+\r",
											"                '\"kind\": \"cm:adc-core:working-config:ltm:profile:tcp:adcprofiletcpstate\",'+\r",
											"    '          \"link\": \"'+ pm.variables.get(\"ProfileTCPSelfLink\") + '\",'+\r",
											"    '          \"name\": \"'+ pm.variables.get(\"ProfileTCPName\") + '\"'+\r",
											"            '},'+\r",
											"    '  \"context\": \"all\"'+\r",
											"    '}'\r",
											"    }\r",
											"\r",
											"    pm.sendRequest(TCPOptions, (error, response) => {\r",
											"        if (error) {\r",
											"            throw new Error(error);\r",
											"        } else {\r",
											"            console.log(\"Attached TCP profile...\")\r",
											"            //postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"//DoServerSSLProfile = 1;\r",
											"if (DoServerSSLProfile == 1) {\r",
											"    // attach ServerSSL Profile\r",
											"    const ServerSSLOptions = {\r",
											"        method: 'POST',\r",
											"        url: pm.variables.get(\"VirtualProfilesURI\"),\r",
											"        header: 'ContentType: application/json',\r",
											"        header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"        body: '{'+\r",
											"    '\"name\": \"serverssl\",'+\r",
											"    '\"partition\": \"Common\",'+\r",
											"            '\"profileServersslReference\": {'+\r",
											"                '\"kind\": \"cm:adc-core:working-config:ltm:profile:server-ssl:adcprofileserversslstate\",'+\r",
											"    '          \"link\": \"'+ pm.variables.get(\"ProfileServerSSLSelfLink\") + '\",'+\r",
											"    '          \"name\": \"'+ pm.variables.get(\"ProfileServerSSLName\") + '\"'+\r",
											"            '},'+\r",
											"    ' \"context\": \"all\"'+\r",
											"    '}'\r",
											"    }\r",
											"\r",
											"    pm.sendRequest(ServerSSLOptions, (error, response) => {\r",
											"        if (error) {\r",
											"            throw new Error(error);\r",
											"        } else {\r",
											"            console.log(\"Attached Server SSL profile...\")\r",
											"            //postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"        }\r",
											"    });\r",
											"}\r",
											"\r",
											"//DoFastL4Profile = 1;\r",
											"if (DoFastL4Profile == 1) {\r",
											"    //not yet implemented\r",
											"    //profileFastl4Reference\r",
											"\r",
											"\r",
											"    // attach FastL4 Profile\r",
											"    const ServerSSLOptions = {\r",
											"        method: 'POST',\r",
											"        url: pm.variables.get(\"VirtualProfilesURI\"),\r",
											"        header: 'ContentType: application/json',\r",
											"        header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"        body: '{'+\r",
											"    '\"name\": \"fastL4\",'+\r",
											"    '\"partition\": \"Common\",'+\r",
											"            '\"profileFastl4Reference\": {'+\r",
											"                '\"kind\": \"cm:adc-core:working-config:ltm:profile:fastl4:adcprofilefastl4state\",'+\r",
											"    '          \"link\": \"'+ pm.variables.get(\"ProfileFastL4SelfLink\") + '\",'+\r",
											"    '          \"name\": \"'+ pm.variables.get(\"ProfileFastL4Name\") + '\"'+\r",
											"            '},'+\r",
											"    ' \"context\": \"all\"'+\r",
											"    '}'\r",
											"    }\r",
											"\r",
											"    pm.sendRequest(ServerSSLOptions, (error, response) => {\r",
											"        if (error) {\r",
											"            throw new Error(error);\r",
											"        } else {\r",
											"            console.log(\"Attached FastL4 profile...\")\r",
											"            //postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"kind\": \"cm:adc-core:working-config:ltm:virtual:adcvirtualstate\",\r\n    \"mask\": \"{{VirtualMask}}\",\r\n    \"name\": \"{{VirtualName}}\",\r\n    \"nat64\": \"disabled\",\r\n    \"state\": \"enabled\",\r\n    \"mirror\": \"disabled\",\r\n    \"policies\": [],\r\n    \"partition\": \"Common\",\r\n    \"rateLimit\": \"disabled\",\r\n    \"ipProtocol\": \"tcp\",\r\n    \"properties\": {\r\n        \"virtual-address\": {\r\n            \"name\": \"{{VirtualDestinationAddress}}\",\r\n            \"address\": \"{{VirtualDestinationAddress}}\",\r\n            \"floating\": \"enabled\",\r\n            \"partition\": \"Common\",\r\n            \"trafficGroup\": \"/Common/traffic-group-1\",\r\n            \"deviceReference\": {\r\n                \"link\": \"{{DeviceSelfLink}}\"\r\n            }\r\n        }\r\n    },\r\n    \"sourcePort\": \"preserve\",\r\n    \"autoLasthop\": \"default\",\r\n    \"description\": \"{{NewDescription}}\",\r\n    \"vlansEnabled\": \"disabled\",\r\n    \"addressStatus\": \"yes\",\r\n    \"poolReference\": {\r\n        \"id\": \"{{PoolID}}\",\r\n        \"kind\": \"cm:adc-core:working-config:ltm:pool:adcpoolstate\",\r\n        \"link\": \"{{PoolSelfLink}}\",\r\n        \"partition\": \"Common\"\r\n    },\r\n    \"rateLimitMode\": \"object\",\r\n    \"sourceAddress\": \"{{VirtualSourceAddress}}\",\r\n    \"translatePort\": \"enabled\",\r\n    \"connectionLimit\": 0,\r\n    \"destinationPort\": \"{{VirtualPort}}\",\r\n    \"deviceReference\": {\r\n        \"kind\": \"shared:resolver:device-groups:restdeviceresolverdevicestate\",\r\n        \"link\": \"{{DeviceSelfLink}}\"\r\n    },\r\n    \"translateAddress\": \"enabled\",\r\n    \"destinationAddress\": \"{{VirtualDestinationAddress}}\",\r\n    \"sourceAddressTranslation\": {\r\n        \"type\": \"automap\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/virtual/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"virtual",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Virtual Information From Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"/*\r",
											"Inputs:\r",
											"    SearchVirtualName           - User Input, the name of the virtual to search for and gather information about.\r",
											"\r",
											"Outputs:\r",
											"\tVirtualName                 - Programmatically populated value, The name of the virtual server\r",
											"    VirtualID\t\t\t        - Programmatically populated value, The ID that references the virtual server\r",
											"\tVirtualSelfLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the Virtual Server\r",
											"\tVirtualSelfURI\t\t        - Programmatically populated value, The link used to make requests about the virtual server in REST Calls\r",
											"\tVirtualDeviceLink\t        - Programmatically populated value, The link to use in JSON documents to reference the Device the virtual server is on.\r",
											"\tVirtualDeviceURI\t        - Programmatically populated value, The link used to make requests about the Device containing the configuration in REST Calls\r",
											"\tVirtualProfilesLink\t        - Programmatically populated value, The link to use in JSON documents to reference the Profiles assigned to the virtual server.\r",
											"\tVirtualProfilesURI\t        - Programmatically populated value, The link used to make requests about the Profiles assigend in REST Calls\r",
											"\tVirtualJSON\t\t\t        - Programmatically populated value, The JSON that references the Virtual Server \r",
											"\tPoolSelfLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the Pool \r",
											"\tPoolSelfURI\t\t\t        - Programmatically populated value, The link used to make requests about the Pool assigned in REST Calls\r",
											"\tPoolID\t\t\t\t        - Programmatically populated value, The ID that references the Pool Associated with the virtual server.\r",
											"\tPoolDeviceLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the Device containnig teh Pool configuration.\r",
											"\tPoolDeviceURI\t\t        - Programmatically populated value, The link used to make requests about the device containing the Pool configuration in REST Calls\r",
											"\tPoolMembersLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the Pool Members\r",
											"\tPoolMembersURI\t\t        - Programmatically populated value, The link used to make requests about the Pool Members in REST Calls\r",
											"\tPoolMonitorLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the Monitor assigned to the pool\r",
											"\tPoolMonitorURI\t\t        - Programmatically populated value, The link used to make requests about the monitor assigend to teh pool in REST Calls\r",
											"\tMonitorSelfLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the Monitor assigned\r",
											"\tMonitorSelfURI\t\t        - Programmatically populated value, The link used to make requests about the monitor assigned in REST Calls\r",
											"\tMonitorID\t\t\t        - Programmatically populated value, The ID that represents the monitor.\r",
											"\tMonitorType\t\t\t        - Programmatically populated value, The type of monitor\r",
											"\tMonitorTypeString\t        - Programmatically populated value, The string of the path used to reference the type in a JSON document.\r",
											"\tMonitorTypeName\t\t        - Programmatically populated value, The string used to reference the type in a JSON document.\r",
											"\tDeviceSelfLink\t\t        - Programmatically populated value, The link to use in JSON documents to reference the device with the configuration.\r",
											"\tDeviceSelfURI\t\t        - Programmatically populated value, The link used to make requests about the Device containing teh configuration in REST Calls\r",
											"    PoolName                    - Programmatically populated value, The Name of the pool attached to the virtual server.\r",
											"    DeviceID                    - Programmatically populated value, The ID of the BIG-IP device the configuration is on.\r",
											"    DeviceSelfLink              - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the device the configuration is on. (the URL contains \"local host\")\r",
											"    DeviceSelfURI               - Programmatically populated value, A link, usable in making REST calls, referring to the device the configuration is on. (the URL contains the IP address of the BIG-IQ device)\r",
											"    VirtualProfilesLink         - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the Profiles assigned to the virtual server. (the URL contains \"local host\")\r",
											"    VirtualProfilesURI          - Programmatically populated value, A link, usable in making REST calls, referring to the \r",
											"    VirtualDestinationAddress   - Programmatically populated value, The Listener (or destination) address of the virtual server.\r",
											"    VirtualMask                 - Programmatically populated value, The subnet mask for the destination address.\r",
											"    VirtualSNATType             - Programmatically populated value, The Type of SNAT. automap, pool, etc\r",
											"    VirtualSNATPoolName         - Programmatically populated value, The name of the SNAT Pool, if a pool.\r",
											"    VirtualSNATPoolID           - Programmatically populated value, The ID of the SNAT Pool, if a pool.\r",
											"    VirtualSNATPoolSelfLink     - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the SNAT Pool assigned to the virtual server. (the URL contains \"local host\")\r",
											"    VirtualSNATPoolSelfURI      - Programmatically populated value, A link, usable in making REST calls, referring to the SNAT Pool assigned to the virtual server. (the URL contains the IP address of the BIG-IQ device)\r",
											"    VirtualPort                 - Programmatically populated value, The Port teh Virtual Server listens on.\r",
											"    VirtualSourceAddress        - Programmatically populated value, The Source addresses allowed to connect. (generally, 0.0.0.0/0)\r",
											"    PoolJSON                    - Programmatically populated value, The JSON for the pool.\r",
											"    ProfileClientSSLID          - Programmatically populated value, The ID for the Client SSL Profile.\r",
											"    ProfileClientSSLName        - Programmatically populated value, The name for the Client SSL Profile.\r",
											"    ProfileClientSSLSelfLink    - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the Client SSL Profile assigned to the virtual server. (the URL contains \"local host\")\r",
											"    ProfileClientSSLSelfURI     - Programmatically populated value, A link, usable in making REST calls, referring to the Client SSL Profile assigned to the virtual server. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileServerSSLID          - Programmatically populated value, The ID for the Server SSL Profile.\r",
											"    ProfileServerSSLName        - Programmatically populated value, The name for the Server SSL Profile.\r",
											"    ProfileServerSSLSelfLink    - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the Server SSL Profile assigned to the virtual server. (the URL contains \"local host\")\r",
											"    ProfileServerSSLSelfURI     - Programmatically populated value, A link, usable in making REST calls, referring to the Server SSL Profile assigned to the virtual server. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileHTTPID               - Programmatically populated value, The ID for the HTTP Profile.\r",
											"    ProfileHTTPName             - Programmatically populated value, The name for the HTTP Profile.\r",
											"    ProfileHTTPSelfLink         - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the HTTP Profile assigned to the virtual server. (the URL contains \"local host\")\r",
											"    ProfileHTTPSelfURI          - Programmatically populated value, A link, usable in making REST calls, referring to the HTTP Profile assigned to the virtual server. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileTCPID                - Programmatically populated value, The ID for the TCP Profile.\r",
											"    ProfileTCPName              - Programmatically populated value, The name for the TCP Profile.\r",
											"    ProfileTCPSelfLink          - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the TCP Profile assigned to the virtual server. (the URL contains \"local host\")\r",
											"    ProfileTCPSelfURI           - Programmatically populated value, A link, usable in making REST calls, referring to the TCP Profile assigned to the virtual server. (the URL contains the IP address of the BIG-IQ device)\r",
											"    ProfileFastL4ID             - Programmatically populated value, The ID for the fastl4 Profile.\r",
											"    ProfileFastL4Name           - Programmatically populated value, The name for the fastl4 Profile.\r",
											"    ProfileFastL4SelfLink       - Programmatically populated value, A link, usable in the REST call's JSON in the request body, referring to the \r",
											"    ProfileFastL4SelfURI        - Programmatically populated value, A link, usable in making REST calls, referring to the fastl4 profile assigned to the virtual server. (the URL contains the IP address of the BIG-IQ device)\r",
											"    NewVirtualTemplate          - Programmatically populated value, the Template mask to use to determine which profiles are applied.\r",
											"\r",
											"*/\r",
											"\r",
											"//Init all Environment variables\r",
											"postman.setEnvironmentVariable(\"VirtualID\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualDeviceLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualProfilesLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"SearchPoolName\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolID\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMemberJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolDeviceLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMembersLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMembersURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMemberPort\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMemberID\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMonitorLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMemberLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"SearchMonitorName\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorID\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"SearchNodeName\",\"\")\r",
											"postman.setEnvironmentVariable(\"NodeID\",\"\")\r",
											"postman.setEnvironmentVariable(\"NodeJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"NodeSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"DeviceSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorType\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorTypeString\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorTypeName\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewDeviceLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"DeviceID\",\"\")\r",
											"postman.setEnvironmentVariable(\"DeviceSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"MonitorSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolMonitorURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolDeviceURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualProfilesURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualDeviceURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualProfilesURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPID\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPName\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"NodeSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"NodeName\",\"\")\r",
											"postman.setEnvironmentVariable(\"NodeDescription\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolDescription\",\"\")\r",
											"postman.setEnvironmentVariable(\"PoolName\",\"\")\r",
											"postman.setEnvironmentVariable(\"SearchPoolName\",\"\")\r",
											"postman.setEnvironmentVariable(\"SearchMonitorName\",\"\")\r",
											"postman.setEnvironmentVariable(\"SearchNodeName\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualDestinationAddress\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSourceAddress\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSNATType\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"VirtualMask\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualPort\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSNATPoolName\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSNATPoolID\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSNATPoolSelfURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualSNATPoolSelfLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"VirtualName\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPName\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParent\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParentLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPParentURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAcceptJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewProfileParent\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewProfileType\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4Parent\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ParentLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4ParentURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeout\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeoutJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLParent\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLParentLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLParentURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChain\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChainLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLChainURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKey\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKeyLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLKeyURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCert\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCertLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLCertURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLParent\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLParentLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLParentURI\",\"\")\r",
											"\r",
											"postman.setEnvironmentVariable(\"NewFileUploadName\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewFileUploadContent\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewFileUploadSize\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewFileUploadContent-Range\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewFileUploadRequestSize\",\"\")\r",
											"postman.setEnvironmentVariable(\"NewFileUploadID\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLPassPhrase\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLChain\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLChainLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLChainURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLKey\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLKeyLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLKeyURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLCert\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLCertLink\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLCertURI\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\",\"\")\r",
											"postman.setEnvironmentVariable(\"ProfileClientSSLPassPhrase\",\"\")\r",
											"//postman.setEnvironmentVariable(\"\",\"\")\r",
											"\r",
											"console.log(\"Cleared Environment variables.\")\r",
											"\r",
											"\r",
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let virtuals = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"virtuals = jsonData.items;\r",
											"//console.log (virtuals)\r",
											"\r",
											"//console.log(\"Items: \"+jsonData.items[1].name)\r",
											"searchname = pm.variables.get(\"SearchVirtualName\")\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"NewVirtualTemplate = pm.variables.get(\"NewVirtualTemplate\")\r",
											"\r",
											"for (virtual in virtuals){\r",
											"    if (jsonData.items[virtual].name == searchname) {\r",
											"        virtualid=jsonData.items[virtual].id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"VirtualName\", jsonData.items[virtual].name);\r",
											"        postman.setEnvironmentVariable(\"VirtualID\", virtualid);\r",
											"        postman.setEnvironmentVariable(\"VirtualSelfLink\", jsonData.items[virtual].selfLink);\r",
											"        postman.setEnvironmentVariable(\"VirtualSelfURI\", jsonData.items[virtual].selfLink.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"PoolSelfLink\", jsonData.items[virtual].poolReference.link);\r",
											"        postman.setEnvironmentVariable(\"PoolSelfURI\", jsonData.items[virtual].poolReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"PoolName\", jsonData.items[virtual].poolReference.name);\r",
											"        postman.setEnvironmentVariable(\"VirtualDeviceLink\", jsonData.items[virtual].deviceReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"VirtualDeviceURI\", jsonData.items[virtual].deviceReference.link);\r",
											"        postman.setEnvironmentVariable(\"DeviceID\", jsonData.items[virtual].deviceReference.id);\r",
											"        postman.setEnvironmentVariable(\"DeviceSelfLink\", jsonData.items[virtual].deviceReference.link);\r",
											"        postman.setEnvironmentVariable(\"DeviceSelfURI\", jsonData.items[virtual].deviceReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"VirtualProfilesLink\", jsonData.items[virtual].profilesCollectionReference.link);\r",
											"        postman.setEnvironmentVariable(\"VirtualProfilesURI\", jsonData.items[virtual].profilesCollectionReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"        postman.setEnvironmentVariable(\"VirtualDestinationAddress\", jsonData.items[virtual].destinationAddress);\r",
											"        postman.setEnvironmentVariable(\"VirtualMask\", jsonData.items[virtual].mask);\r",
											"        postman.setEnvironmentVariable(\"VirtualSNATType\", jsonData.items[virtual].sourceAddressTranslation.type);\r",
											"        if (jsonData.items[virtual].sourceAddressTranslation.type == \"snat\")\r",
											"        {\r",
											"            postman.setEnvironmentVariable(\"VirtualSNATPoolName\", jsonData.items[virtual].sourceAddressTranslation.snatpoolReference.name);\r",
											"            postman.setEnvironmentVariable(\"VirtualSNATPoolID\", jsonData.items[virtual].sourceAddressTranslation.snatpoolReference.id);\r",
											"            postman.setEnvironmentVariable(\"VirtualSNATPoolSelfURI\", jsonData.items[virtual].sourceAddressTranslation.snatpoolReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"VirtualSNATPoolSelfLink\", jsonData.items[virtual].sourceAddressTranslation.snatpoolReference.link);\r",
											"        }\r",
											"        postman.setEnvironmentVariable(\"VirtualPort\", jsonData.items[virtual].destinationPort);\r",
											"        postman.setEnvironmentVariable(\"VirtualSourceAddress\", jsonData.items[virtual].sourceAddress);\r",
											"        //postman.setEnvironmentVariable(\"\", jsonData.items[virtual].);\r",
											"        //postman.setEnvironmentVariable(\"\", jsonData.items[virtual].);\r",
											"        //log data saved\r",
											"        console.log (\"Found \"+searchname+\": Now you may continue to get the specific virtual's json from the REST API.\")\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            //console.log(\"\")\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set Virtual ID to: \"+pm.variables.get(\"VirtualID\"))\r",
											"            console.log(\"Set Pool Self Link to: \"+pm.variables.get(\"PoolSelfLink\"))\r",
											"            console.log(\"Set Virtual Self Link to: \"+pm.variables.get(\"VirtualSelfLink\"))\r",
											"            console.log(\"Set Virtual LTM Device to: \"+pm.variables.get(\"VirtualDeviceLink\"))\r",
											"            console.log(\"Set Virtual Profiles Link to: \"+pm.variables.get(\"VirtualProfilesLink\"))\r",
											"        }\r",
											"        console.log (\"Gathering the specific virtual's json from the REST API.\")\r",
											"    }\r",
											"}\r",
											"\r",
											"//now get the virtual server's JSON inline\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"const options = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"VirtualSelfURI\"),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"        postman.setEnvironmentVariable(\"VirtualJSON\", response.text())\r",
											"    }\r",
											"});\r",
											"\r",
											"//gather pool info\r",
											"console.log(\"Gathering Pool related information.\")\r",
											"const options2 = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"PoolSelfURI\"),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"\r",
											"};\r",
											"pm.sendRequest(options2, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"        var jsonData = response.json()\r",
											"        var monitortype = \"\"\r",
											"        poolid=jsonData.id\r",
											"        //gather data for environment Variables related to the object\r",
											"        postman.setEnvironmentVariable(\"PoolID\", poolid);\r",
											"        postman.setEnvironmentVariable(\"PoolDeviceLink\", jsonData.deviceReference.link)\r",
											"        postman.setEnvironmentVariable(\"PoolDeviceURI\", jsonData.deviceReference.link.replace(/localhost/g,bigiqmgmt))\r",
											"        postman.setEnvironmentVariable(\"PoolMembersLink\", jsonData.membersCollectionReference.link)\r",
											"        postman.setEnvironmentVariable(\"PoolMembersURI\", jsonData.membersCollectionReference.link.replace(/localhost/g,bigiqmgmt))\r",
											"        //this will need to change somehow, the monitors are not always TCP (monitorTcpReferences), and what if there is more than one monitor assigned?\r",
											"        \r",
											"        //determine what type of monitors we have and set monitor variables\r",
											"        console.log(jsonData)\r",
											"        try {\r",
											"            monitortype = jsonData.monitorTcpReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorTcpReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorTcpReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorTcpReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorTcpReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"tcp\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"tcp\");\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no tcp monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorHttpsReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorHttpsReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorHttpsReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorHttpsReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorHttpsReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"https\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"https\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no https monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorHttpReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorHttpReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorHttpReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorHttpReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorHttpReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"http\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"http\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no http monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorTcpHalfOpenReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorTcpHalfOpenReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorTcpHalfOpenReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorTcpHalfOpenReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorTcpHalfOpenReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"tcp-half-open\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"tcp-half-open\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no tcp-half-open monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorDnsReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorDnsReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorDnsReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorDnsReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorDnsReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"dns\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"dns\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no dns monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorGatewayIcmpReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorGatewayIcmpReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorGatewayIcmpReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorGatewayIcmpReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorGatewayIcmpReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"icmp\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"icmp\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no icmp monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorExternalReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorExternalReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorExternalReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorExternalReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorExternalReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"external\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"external\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no external monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorFtpReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorExternalReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorFtpReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorFtpReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorDnsReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"ftp\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"ftp\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no ftp monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorLdapReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorExternalReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorLdapReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorLdapReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorLdapReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"ldap\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"ldap\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no ldap monitors\")\r",
											"        }\r",
											"        try {\r",
											"            monitortype = jsonData.monitorSmtpReferences[0].kind\r",
											"            postman.setEnvironmentVariable(\"MonitorID\", jsonData.monitorExternalReferences[0].id);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfLink\", jsonData.monitorSmtpReferences[0].link);\r",
											"            postman.setEnvironmentVariable(\"MonitorSelfURI\", jsonData.monitorSmtpReferences[0].link.replace(/localhost/g,bigiqmgmt));\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeString\", \"monitorSmtpReferences\");\r",
											"            postman.setEnvironmentVariable(\"MonitorTypeName\", \"smtp\");\r",
											"            postman.setEnvironmentVariable(\"MonitorType\", \"smtp\");MonitorType\r",
											"        } catch (error) {\r",
											"            //do nothing\r",
											"            console.log(\"caught no smtp monitors\")\r",
											"        }\r",
											"\r",
											"        console.log (monitortype)\r",
											"     \r",
											"        postman.setEnvironmentVariable(\"PoolJSON\", response.text());\r",
											"        console.log(\"Found JSON for the Pool, storing in Environment variable 'PoolJSON'\")\r",
											"\r",
											"        //log if verbose set to greater than 0, do not log if set to 0\r",
											"        if (pm.variables.get(\"BeVerbose\")) {\r",
											"            console.log(\"updated the following environmental information:\")\r",
											"            console.log(\"Set pool device link to: \"+pm.variables.get(\"PoolDeviceLink\"))\r",
											"            console.log(\"Set pool members link to: \"+pm.variables.get(\"PoolMembersLink\"))\r",
											"            console.log(\"Set pool monitor link to: \"+pm.variables.get(\"PoolMonitorLink\"))\r",
											"            console.log(\"Set monitor self link to: \"+pm.variables.get(\"MonitorSelfLink\"))\r",
											"            console.log(\"Set monitor self URI to: \"+pm.variables.get(\"MonitorSelfURI\"))\r",
											"            console.log(\"Set monitor id to: \"+pm.variables.get(\"MonitorID\"))\r",
											"            //console.log(pm.variables.get(\"PoolJSON\"))\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//VirtualProfilesURI\r",
											"const GetProfiles = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"VirtualProfilesURI\"),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"};\r",
											"\r",
											" pm.sendRequest(GetProfiles, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"                //console.log (response.text)\r",
											"                var jsonData = response.json()//JSON.parse(response)\r",
											"                let profiles = pm.globals.get(\"itemOfArray\");\r",
											"                profiles = jsonData.items;\r",
											"                bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"                index = 0;\r",
											"                for (profile in profiles){\r",
											"                    //Check for ClientSSL Profiles\r",
											"                    try {\r",
											"                        postman.setEnvironmentVariable(\"ProfileClientSSLID\", jsonData.items[index].profileClientsslReference.id);\r",
											"                        postman.setEnvironmentVariable(\"ProfileClientSSLName\", jsonData.items[index].profileClientsslReference.name);\r",
											"                        postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", jsonData.items[index].profileClientsslReference.link);\r",
											"                        postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", jsonData.items[index].profileClientsslReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"                        console.log(\"Found ClientSSL Profile: \"+ jsonData.items[index].profileClientsslReference.name)\r",
											"                        NewVirtualTemplate = NewVirtualTemplate + 4;\r",
											"                    } catch (error) {\r",
											"                        //do nothing\r",
											"                        console.log(\"caught no ClientSSL Profiles\")\r",
											"                    }\r",
											"\r",
											"                    //Check for ServerSSL Profiles\r",
											"                    try {\r",
											"                        postman.setEnvironmentVariable(\"ProfileServerSSLID\", jsonData.items[index].profileServersslReference.id);\r",
											"                        postman.setEnvironmentVariable(\"ProfileServerSSLName\", jsonData.items[index].profileServersslReference.name);\r",
											"                        postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", jsonData.items[index].profileServersslReference.link);\r",
											"                        postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", jsonData.items[index].profileServersslReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"                        console.log(\"Found ClientSSL Profile: \"+ jsonData.items[index].profileServersslReference.name)\r",
											"                        NewVirtualTemplate = NewVirtualTemplate + 8;\r",
											"                    } catch (error) {\r",
											"                        //do nothing\r",
											"                        console.log(\"caught no ServerSSL Profiles\")\r",
											"                    }\r",
											"\r",
											"                    //Check for HTTP Profiles\r",
											"                    try {\r",
											"                        postman.setEnvironmentVariable(\"ProfileHTTPID\", jsonData.items[index].profileHttpReference.id);\r",
											"                        postman.setEnvironmentVariable(\"ProfileHTTPName\", jsonData.items[index].profileHttpReference.name);\r",
											"                        postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", jsonData.items[index].profileHttpReference.link);\r",
											"                        postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", jsonData.items[index].profileHttpReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"                        NewVirtualTemplate = NewVirtualTemplate + 2;\r",
											"                        console.log(\"Found ClientSSL Profile: \"+ jsonData.items[index].profileHttpReference.name)\r",
											"                    } catch (error) {\r",
											"                        //do nothing\r",
											"                        console.log(\"caught no HTTP Profiles\")\r",
											"                    }\r",
											"\r",
											"                    //Check for TCP Profiles\r",
											"                    try {\r",
											"                        postman.setEnvironmentVariable(\"ProfileTCPID\", jsonData.items[index].profileTcpReference.id);\r",
											"                        postman.setEnvironmentVariable(\"ProfileTCPName\", jsonData.items[index].profileTcpReference.name);\r",
											"                        postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", jsonData.items[index].profileTcpReference.link);\r",
											"                        postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", jsonData.items[index].profileTcpReference.link.replace(/localhost/g,bigiqmgmt));\r",
											"                        NewVirtualTemplate = NewVirtualTemplate + 1;\r",
											"                        console.log(\"Found TCP Profile: \"+ jsonData.items[index].profileTcpReference.name)\r",
											"                    } catch (error) {\r",
											"                        //do nothing\r",
											"                        console.log(\"caught no TCP Profiles\")\r",
											"                    }\r",
											"\r",
											"                    //Check for FastL4 Profiles\r",
											"                    try {\r",
											"                        postman.setEnvironmentVariable(\"ProfileFastL4ID\", jsonData.items[index].profileFastl4Reference.id);\r",
											"                        postman.setEnvironmentVariable(\"ProfileFastL4Name\", jsonData.items[index].profileFastl4Reference.name);\r",
											"                        postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", jsonData.items[index].profileFastl4Reference.link);\r",
											"                        postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", jsonData.items[index].profileFastl4Reference.link.replace(/localhost/g,bigiqmgmt));\r",
											"                        NewVirtualTemplate = NewVirtualTemplate + 16;\r",
											"                        console.log(\"Found FastL4 Profile: \"+ jsonData.items[index].profileFastl4Reference.name)\r",
											"                    } catch (error) {\r",
											"                        //do nothing\r",
											"                        console.log(\"caught no FastL4 Profiles\")\r",
											"                    }\r",
											"\r",
											"                    index++;\r",
											"                }\r",
											"                //set the variable to contain the bitmask values for the profiles that are used.\r",
											"                postman.setEnvironmentVariable(\"NewVirtualTemplate\", NewVirtualTemplate);\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/virtual?$filter=name eq '*{{SearchVirtualName}}*'",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"virtual"
									],
									"query": [
										{
											"key": "$filter",
											"value": "name eq '*{{SearchVirtualName}}*'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get remaining Virtual Information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//begin parsing\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"let poolmembers = pm.globals.get(\"itemOfArray\");\r",
											"\r",
											"poolmembers = jsonData.items;\r",
											"bigiqmgmt = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"// get pool member info\r",
											"for (poolmember in poolmembers){\r",
											"\tpoolmemberid=jsonData.items[poolmember].id\r",
											"\tpostman.setEnvironmentVariable(\"PoolMemberJSON\", responseBody);\r",
											"    console.log(\"updated the pool member JSON.\")\r",
											"}\r",
											"\r",
											"//now get the monitor info inline\r",
											"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")\r",
											"\r",
											"const options = {\r",
											"    method: 'GET',\r",
											"    url: pm.variables.get(\"MonitorSelfURI\"),\r",
											"    header: 'ContentType: application/json',\r",
											"    header: 'X-F5-Auth-Token: '+pm.variables.get(\"AuthToken\"),\r",
											"    body: \"\"\r",
											"\r",
											"};\r",
											"\r",
											"pm.sendRequest(options, (error, response) => {\r",
											"    if (error) {\r",
											"        throw new Error(error);\r",
											"    } else {\r",
											"        var jsonData = response.json()\r",
											"\r",
											"        if (pm.variables.get(\"MonitorID\") == jsonData.id) {\r",
											"            console.log(\"Found JSON for Monitor, storing in Environment variable 'MonitorJSON'\")\r",
											"            postman.setEnvironmentVariable(\"MonitorJSON\", response.text())\r",
											"            postman.setEnvironmentVariable(\"SearchMonitorName\", jsonData.name)\r",
											"\r",
											"            //log if verbose set to greater than 0, do not log if set to 0\r",
											"            if (pm.variables.get(\"BeVerbose\")) {\r",
											"                console.log(\"updated the following environmental information:\")\r",
											"                console.log(\"Set monitor JSON to: \"+pm.variables.get(\"MonitorJSON\"))\r",
											"                console.log(\"Set search monitor name to: \"+pm.variables.get(\"SearchMonitorName\"))\r",
											"            }\r",
											"       }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{PoolMembersURI}}",
									"host": [
										"{{PoolMembersURI}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Virtual Server  from Environment variables",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/virtual/{{VirtualID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"virtual",
										"{{VirtualID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clear Environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Inputs:\r",
									"    None.\r",
									"\r",
									"Outputs:\r",
									"\tNone, clears the environment variables.\r",
									"*/\r",
									"\r",
									"//Init all Environment variables\r",
									"postman.setEnvironmentVariable(\"VirtualID\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualDeviceLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualProfilesLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchPoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolID\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolDeviceLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMembersLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMembersURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberPort\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberID\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMonitorLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchMonitorName\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorID\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchNodeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeID\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeviceSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorType\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorTypeString\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorTypeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewDeviceLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeviceID\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeviceSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMonitorURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolDeviceURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualProfilesURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualDeviceURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualProfilesURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPID\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPName\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"NodeSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeDescription\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolDescription\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchPoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchMonitorName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchNodeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualDestinationAddress\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSourceAddress\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATType\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"VirtualMask\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualPort\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolID\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualName\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPParentURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAcceptJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewProfileParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewProfileType\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4Parent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ParentURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeout\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeoutJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLParentURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLChain\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLChainLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLChainURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLKey\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLKeyLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLKeyURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLCert\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLCertLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLCertURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLParentURI\",\"\")\r",
									"\r",
									"postman.setEnvironmentVariable(\"NewFileUploadName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadContent\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadSize\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadContent-Range\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadRequestSize\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadID\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLPassPhrase\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChain\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChainLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChainURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKey\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKeyLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKeyURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCert\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCertLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCertURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLPassPhrase\",\"\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"\r",
									"\r",
									"console.log(\"Cleared Environment variables.\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "1chnl!",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/virtual?$filter=name eq '*{{SearchVirtualName}}*'",
							"protocol": "https",
							"host": [
								"{{BIGIQ_Mgmt}}"
							],
							"path": [
								"mgmt",
								"cm",
								"adc-core",
								"working-config",
								"ltm",
								"virtual"
							],
							"query": [
								{
									"key": "$filter",
									"value": "name eq '*{{SearchVirtualName}}*'"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Development Requests Area - !Non-working!",
			"item": [
				{
					"name": "Example REST Request Body Templates",
					"item": [
						{
							"name": "Get Node Example",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/node/example",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"node",
										"example"
									]
								}
							},
							"response": []
						},
						{
							"name": "** Get Monitor Example",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/monitor/http/example",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"monitor",
										"http",
										"example"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Pool Example",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/pool/example",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										"example"
									]
								}
							},
							"response": []
						},
						{
							"name": "** Get HTTP Profile Example",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/profile/http/example",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"http",
										"example"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Virtual Example",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/virtual/example",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"virtual",
										"example"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deploy Functions",
					"item": [
						{
							"name": "**Create Pool Deployment without deploy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"postman.setEnvironmentVariable(\"DeployName\", \"AutoDeploy-\"+Date.now())\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"The deployment named \"+pm.variables.get(\"DeployName\")+\" was created.\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"skipVerifyConfig\":false,\r\n   \"skipDistribution\":true,\r\n   \"name\":\"{{DeployName}}\",\r\n   \"deviceReferences\":[\r\n      {\r\n         \"link\":\"{{DeviceSelfLink}}\"\r\n      }\r\n   ],\r\n   \"objectsToDeployReferences\":[\r\n      {\r\n         \"link\":\"{{PoolSelfLink}}\"\r\n      }],\r\n   \"deploySpecifiedObjectsOnly\":false\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/tasks/deploy-configuration",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"tasks",
										"deploy-configuration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scratch",
					"item": [
						{
							"name": "** Get scratch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/tasks/certificate-management/{{NewFileUploadID}}",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"tasks",
										"certificate-management",
										"{{NewFileUploadID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "** Create Self Signed Managed Certificate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"issuer\": \"Self\",\r\n    \"itemName\": \"TestCert1.crt\",\r\n    \"itemPartition\": \"Common\",\r\n    \"durationInDays\": 365,\r\n    \"country\": \"US\",\r\n    \"commonName\": \"TestCert1CommonName\",\r\n    \"division\": \"ADC\",\r\n    \"organization\": \"BIG-IQ\",\r\n    \"locality\": \"Seattle\",\r\n    \"state\": \"WA\",\r\n    \"email\": \"j.doe@company.com\",\r\n    \"subjectAlternativeName\": \"DNS:company.com\",\r\n    \"securityType\": \"password\",\r\n    \"keyType\": \"RSA\",\r\n    \"keySize\": 2048,\r\n    \"keyPassphrase\": \"123\",\r\n    \"administratorEmail\": \"\",\r\n    \"challengePassword\": \"\",\r\n    \"command\": \"GENERATE_CERT\"\r\n}"
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/tasks/certificate-management",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"tasks",
										"certificate-management"
									]
								}
							},
							"response": []
						},
						{
							"name": "** Create HTTP Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "        {\r\n            \"hsts\": {\r\n                \"maximumAge\": 16070400,\r\n                \"isModeEnabled\": false,\r\n                \"isPreloadEnabled\": false,\r\n                \"isIncludeSubdomainsEnabled\": true\r\n            },\r\n            \"kind\": \"cm:adc-core:working-config:ltm:profile:http:adcprofilehttpstate\",\r\n            \"name\": \"http-transparent\",\r\n            \"sflow\": {\r\n                \"pollInterval\": 0,\r\n                \"samplingRate\": 0,\r\n                \"pollIntervalGlobal\": \"yes\",\r\n                \"samplingRateGlobal\": \"yes\"\r\n            },\r\n            \"lwsWidth\": 80,\r\n            \"partition\": \"Common\",\r\n            \"proxyType\": \"transparent\",\r\n            \"generation\": 1,\r\n            \"isNoDelete\": true,\r\n            \"viaRequest\": \"preserve\",\r\n            \"enforcement\": {\r\n                \"pipeline\": \"allow\",\r\n                \"maxRequests\": 0,\r\n                \"knownMethods\": [\r\n                    \"CONNECT\",\r\n                    \"DELETE\",\r\n                    \"GET\",\r\n                    \"HEAD\",\r\n                    \"LOCK\",\r\n                    \"OPTIONS\",\r\n                    \"POST\",\r\n                    \"PROPFIND\",\r\n                    \"PUT\",\r\n                    \"TRACE\",\r\n                    \"UNLOCK\"\r\n                ],\r\n                \"maxHeaderSize\": 16384,\r\n                \"unknownMethod\": \"allow\",\r\n                \"maxHeaderCount\": 32,\r\n                \"excessClientHeaders\": \"pass-through\",\r\n                \"excessServerHeaders\": \"pass-through\",\r\n                \"oversizeClientHeaders\": \"pass-through\",\r\n                \"oversizeServerHeaders\": \"pass-through\",\r\n                \"isTruncatedRedirectsEnabled\": true\r\n            },\r\n            \"headerErase\": \"\",\r\n            \"viaHostName\": \"\",\r\n            \"viaResponse\": \"preserve\",\r\n            \"fallbackHost\": \"\",\r\n            \"headerInsert\": \"\",\r\n            \"lwsSeparator\": \"\",\r\n            \"explicitProxy\": {\r\n                \"hostNames\": [],\r\n                \"tunnelName\": \"\",\r\n                \"dnsResolver\": \"none\",\r\n                \"routeDomain\": \"\",\r\n                \"dnsErrorMessage\": \"\",\r\n                \"badRequestMessage\": \"\",\r\n                \"badResponseMessage\": \"\",\r\n                \"connectErrorMessage\": \"\",\r\n                \"defaultConnectHandling\": \"deny\"\r\n            },\r\n            \"basicAuthRealm\": \"\",\r\n            \"encryptCookies\": [],\r\n            \"redirectRewrite\": \"none\",\r\n            \"requestChunking\": \"sustain\",\r\n            \"serverAgentName\": \"BigIP\",\r\n            \"lastUpdateMicros\": 1638553135569458,\r\n            \"responseChunking\": \"sustain\",\r\n            \"isAcceptXffEnabled\": false,\r\n            \"encryptCookieSecret\": \"\",\r\n            \"fallbackStatusCodes\": [],\r\n            \"xffAlternativeNames\": [],\r\n            \"responseHeadersPermitted\": [],\r\n            \"isInsertXforwardedForEnabled\": false,\r\n            \"isOneconnectTransformationsEnabled\": true\r\n        }"
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/cm/adc-core/working-config/ltm/profile/http/",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"profile",
										"http",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "** Get all pools",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/pool/",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"pool",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "** Modify Specific Virtual",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{VirtualID}}\",\r\n    \"kind\": \"cm:adc-core:working-config:ltm:virtual:adcvirtualstate\",\r\n    \"mask\": \"{{VirtualMask}}\",\r\n    \"name\": \"{{VirtualName}}\",\r\n    \"nat64\": \"disabled\",\r\n    \"state\": \"enabled\",\r\n    \"mirror\": \"disabled\",\r\n    \"policies\": [],\r\n    \"selfLink\": \"{{VirtualSelfLink}}\",\r\n    \"partition\": \"Common\",\r\n    \"rateLimit\": \"disabled\",\r\n    \"ipProtocol\": \"tcp\",\r\n    \"properties\": {\r\n        \"virtual-address\": {\r\n            \"name\": \"{{VirtualDestinationAddress}}\",\r\n            \"address\": \"{{VirtualDestinationAddress}}\",\r\n            \"floating\": \"enabled\",\r\n            \"partition\": \"Common\",\r\n            \"trafficGroup\": \"/Common/traffic-group-1\",\r\n            \"deviceReference\": {\r\n                \"link\": \"{{DeviceSelfLink}}\"\r\n            }\r\n        }\r\n    },\r\n    \"sourcePort\": \"preserve\",\r\n    \"autoLasthop\": \"default\",\r\n    \"description\": \"{{VirtualDescription}}\",\r\n    \"vlansEnabled\": \"disabled\",\r\n    \"addressStatus\": \"yes\",\r\n    \"poolReference\": {\r\n        \"id\": \"{{PoolID}}\",\r\n        \"kind\": \"cm:adc-core:working-config:ltm:pool:adcpoolstate\",\r\n        \"link\": \"{{PoolSelfLink}}\",\r\n        \"partition\": \"Common\"\r\n    },\r\n    \"rateLimitMode\": \"object\",\r\n    \"sourceAddress\": \"{{VirtualSourceAddress}}\",\r\n    \"translatePort\": \"enabled\",\r\n    \"connectionLimit\": 0,\r\n    \"destinationPort\": \"{{VirtualPort}}\",\r\n    \"deviceReference\": {\r\n        \"kind\": \"shared:resolver:device-groups:restdeviceresolverdevicestate\",\r\n        \"link\": \"{{DeviceSelfLink}}\"\r\n    },\r\n    \"translateAddress\": \"enabled\",\r\n    \"destinationAddress\": \"{{VirtualDestinationAddress}}\",\r\n    \"sourceAddressTranslation\": {\r\n        \"type\": \"{{VirtualSNATType}}\",\r\n        \"snatpoolReference\": {\r\n            \"id\": \"{{VirtualSNATPoolID}}\",\r\n            \"kind\": \"cm:adc-core:working-config:ltm:snatpool:adcsnatpoolstate\",\r\n            \"link\": \"{{VirtualSNATPoolSelfLink}}\",\r\n            \"name\": \"{{VirtualSNATPoolName}}\",\r\n            \"partition\": \"Common\"\r\n        }\r\n    },\r\n    \"profilesCollectionReference\": {\r\n        \"link\": \"{{VirtualProfilesLink}}\",\r\n        \"isSubcollection\": true\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/virtual/{{VirtualID}}",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"ltm",
										"virtual",
										"{{VirtualID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "** get ssl key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/sys/file/ssl-key/7628ab5b-8a08-3aba-bf12-107c0a73d259",
									"protocol": "https",
									"host": [
										"{{BIGIQ_Mgmt}}"
									],
									"path": [
										"mgmt",
										"cm",
										"adc-core",
										"working-config",
										"sys",
										"file",
										"ssl-key",
										"7628ab5b-8a08-3aba-bf12-107c0a73d259"
									]
								}
							},
							"response": []
						},
						{
							"name": "**Check Upload File Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "1chnl!",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-F5-Auth-Token",
										"value": "{{AuthToken}}",
										"type": "text"
									},
									{
										"key": "Content-Range",
										"value": "{{NewFileUploadContent-Range}}",
										"type": "string"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://10.155.111.64/mgmt/shared/file-transfer/uploads/",
									"protocol": "https",
									"host": [
										"10",
										"155",
										"111",
										"64"
									],
									"path": [
										"mgmt",
										"shared",
										"file-transfer",
										"uploads",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clear *Everything* from the Environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//console.info(\"Token --->\"+pm.variables.get(\"AuthToken\"));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*\r",
									"Inputs:\r",
									"    None.\r",
									"\r",
									"Outputs:\r",
									"\tNone, clears *ALL* the environment variables. (basically, a 'Factory Reset')\r",
									"*/\r",
									"\r",
									"//Init all Environment variables\r",
									"postman.setEnvironmentVariable(\"VirtualID\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualDeviceLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualProfilesLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchPoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolID\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolDeviceLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMembersLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMembersURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberPort\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberID\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMonitorLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMemberLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchMonitorName\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorID\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchNodeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeID\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeviceSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorType\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorTypeString\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorTypeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSendString\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorRecvString\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewDeviceLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeviceID\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeviceSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"MonitorSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolMonitorURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolDeviceURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualProfilesURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualDeviceURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualProfilesURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPID\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPName\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"NodeSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NodeDescription\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolDescription\",\"\")\r",
									"postman.setEnvironmentVariable(\"PoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchPoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchMonitorName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchNodeName\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualDestinationAddress\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSourceAddress\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATType\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileHTTPSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"VirtualMask\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualPort\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolName\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolID\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolSelfURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualSNATPoolSelfLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualName\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPName\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPSelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPSelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileTCPParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPParentURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPidleTimeout\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPidleTimeoutJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAccept\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileTCPisVerifiedAcceptJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewProfileParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewProfileType\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ID\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4Name\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfLink\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4SelfURI\", \"\");\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4Parent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4ParentURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeout\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileFastL4idleTimeoutJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLParentURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLChain\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLChainLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLChainURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLKey\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLKeyLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLKeyURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLCert\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLCertLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLCertURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLParent\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLParentLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLParentURI\",\"\")\r",
									"\r",
									"postman.setEnvironmentVariable(\"NewFileUploadName\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadContent\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadSize\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadContent-Range\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadRequestSize\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewFileUploadID\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLPassPhrase\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChain\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChainLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChainURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLChainJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKey\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKeyLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKeyURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLKeyJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCert\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCertLink\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCertURI\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileServerSSLCertJSON\",\"\")\r",
									"postman.setEnvironmentVariable(\"ProfileClientSSLPassPhrase\",\"\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"\r",
									"//clear normally not cleared Environment variables\r",
									"postman.setEnvironmentVariable(\"ProfileSearchName\",\"\")\r",
									"postman.setEnvironmentVariable(\"DeployName\",\"\")\r",
									"postman.setEnvironmentVariable(\"SearchDeviceAddress\",\"\")\r",
									"/postman.setEnvironmentVariable(\"SearchVirtualName\",\"\")\r",
									"postman.setEnvironmentVariable(\"AuthTokenTimeoutTime\",\"\")\r",
									"postman.setEnvironmentVariable(\"AuthToken\",\"\")\r",
									"postman.setEnvironmentVariable(\"Password\",\"\")\r",
									"postman.setEnvironmentVariable(\"UserName\",\"\")\r",
									"postman.setEnvironmentVariable(\"BIGIQ_Mgmt\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualName\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualMask\",\"\")\r",
									"postman.setEnvironmentVariable(\"VirtualPort\",\"\")\r",
									"postman.setEnvironmentVariable(\"NewVirtualTemplate\",\"0\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"//postman.setEnvironmentVariable(\"\",\"\")\r",
									"\r",
									"console.log(\"Cleared Environment variables.\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "1chnl!",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-F5-Auth-Token",
								"value": "{{AuthToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{BIGIQ_Mgmt}}/mgmt/cm/adc-core/working-config/ltm/virtual",
							"protocol": "https",
							"host": [
								"{{BIGIQ_Mgmt}}"
							],
							"path": [
								"mgmt",
								"cm",
								"adc-core",
								"working-config",
								"ltm",
								"virtual"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//authenticate to teh BIG-IQ",
					"MgmtIP = pm.variables.get(\"BIGIQ_Mgmt\")",
					"user = pm.variables.get(\"UserName\")",
					"password = pm.variables.get(\"Password\")",
					"",
					"if (MgmtIP == \"\" || MgmtIP == undefined || MgmtIP == 0) {",
					"    throw new Error(\"*FAILURE!* BIG-IQ Management address is empty! Please set it in the environment variables to avoid future errors.\")",
					"}",
					"if (user == \"\" || user == undefined || user == 0) {",
					"    throw new Error('*FAILURE!* BIG-IQ Management user is empty! Please set it in the environment variables to avoid future errors.')",
					"}",
					"if (password == \"\" || password == undefined || password == 0) {",
					"    throw new Error(\"*FAILURE!* BIG-IQ Management password is empty! Please set it in the environment variables to avoid future errors.\")",
					"}",
					"",
					"const options = {",
					"    method: 'POST',",
					"    url: 'https://'+MgmtIP+'/mgmt/shared/authn/login',",
					"    header: 'ContentType: application/json',",
					"    body: \"{ \\\"username\\\":\\\"\"+user+\"\\\", \\\"password\\\":\\\"\"+password+\"\\\", \\\"loginProviderName\\\": \\\"tmos\\\"}\"",
					"",
					"};",
					"pm.sendRequest(options, (error, response) => {",
					"    if (error) {",
					"        throw new Error(error);",
					"    } else {",
					"        //console.log(response.json()); //this works... it shows the JSON",
					"        var jsonData = response.json()",
					"        console.info(\"Token: \"+jsonData.token.token)",
					"        postman.setEnvironmentVariable(\"AuthToken\", jsonData.token.token);",
					"        postman.setEnvironmentVariable(\"AuthTokenTimeoutTime\", jsonData.token.exp)",
					"    }",
					"});",
					"",
					"//funtions",
					"MonitorTypeString = {",
					"  Get: function(jsonData) {",
					"        // monitor \"devination\" hack",
					"        // This JSON Data must be a monitor reference so, make monitor = 0;",
					"        switch(jsonData.items[monitor].kind) {",
					"            case \"cm:adc-core:working-config:ltm:monitor:http:adcmonitorhttpstate\":",
					"                return \"monitorHttpReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:https:adcmonitorhttpsstate\":",
					"                return \"monitorHttpsReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:tcp:adcmonitortcpstate\":",
					"                return \"monitorTcpReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:tcp-half-open:adcmonitortcphalfopenstate\":",
					"                return \"monitorTcpHalfOpenReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:dns:adcmonitordnsstate\":",
					"                return \"monitorDnsReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:icmp:adcmonitoricmpstate\":",
					"                return \"monitorGatewayIcmpReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:external:adcmonitorexternalstate\":",
					"                return \"monitorExternalReferences\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:ftp:adcmonitorftpstate\":",
					"                return \"monitorFtpReferences\"",
					"            break;            ",
					"            case \"cm:adc-core:working-config:ltm:monitor:ldap:adcmonitorldapstate\":",
					"                return \"monitorLdapReferences\"",
					"            break;            ",
					"            case \"cm:adc-core:working-config:ltm:monitor:smtp:adcmonitorsmtpstate\":",
					"                return \"monitorSmtpReferences\"",
					"            break;            ",
					"            //case \"xxxxx\":",
					"            //    return \"xxxxxxxxx\"",
					"            //break;            ",
					"        }",
					"    }",
					"}",
					"",
					"MonitorTypeName = {",
					"  Get: function(jsonData) {",
					"        // monitor \"devination\" hack",
					"        switch(jsonData.items[monitor].kind) {",
					"            case \"cm:adc-core:working-config:ltm:monitor:http:adcmonitorhttpstate\":",
					"                return \"http\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:https:adcmonitorhttpsstate\":",
					"                return \"https\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:tcp:adcmonitortcpstate\":",
					"                return \"tcp\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:tcp-half-open:adcmonitortcphalfopenstate\":",
					"                return \"tcp-half-open\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:dns:adcmonitordnsstate\":",
					"                return \"dns\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:icmp:adcmonitoricmpstate\":",
					"                return \"icmp\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:external:adcmonitorexternalstate\":",
					"                return \"external\"",
					"            break;",
					"            case \"cm:adc-core:working-config:ltm:monitor:ftp:adcmonitorftpstate\":",
					"                return \"ftp\"",
					"            break;            ",
					"            case \"cm:adc-core:working-config:ltm:monitor:ldap:adcmonitorldapstate\":",
					"                return \"ldap\"",
					"            break;            ",
					"            case \"cm:adc-core:working-config:ltm:monitor:smtp:adcmonitorsmtpstate\":",
					"                return \"smtp\"",
					"            break;            ",
					"            //case \"xxxxx\":",
					"            //    return \"xxxxxxxxx\"",
					"            //break;            ",
					"        }",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status 200 Test\", function () {",
					"    var jsonData = JSON.parse(responseBody);",
					"    pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	]
}